'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ds_Solicitud"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ds_Solicitud
    Inherits Global.System.Data.DataSet
    
    Private tabledt_Solicitud As dt_SolicitudDataTable
    
    Private tabledt_Datos As dt_DatosDataTable
    
    Private tableDt_DatosE As Dt_DatosEDataTable
    
    Private tableDt_DatosF As Dt_DatosFDataTable
    
    Private tableDt_Padre As Dt_PadreDataTable
    
    Private tableDt_Madre As Dt_MadreDataTable
    
    Private tableDt_Hermanos As Dt_HermanosDataTable
    
    Private tableDt_Rasgos As Dt_RasgosDataTable
    
    Private tabledt_EmpleoAnt1 As dt_EmpleoAnt1DataTable
    
    Private tabledt_EmpleoAnt2 As dt_EmpleoAnt2DataTable
    
    Private tabledt_EmpleoAnt3 As dt_EmpleoAnt3DataTable
    
    Private tabledt_EmpleoAnt4 As dt_EmpleoAnt4DataTable
    
    Private tabledt_Referencias As dt_ReferenciasDataTable
    
    Private tabledt_Iengresos As dt_IengresosDataTable
    
    Private tabledt_Cursos1 As dt_Cursos1DataTable
    
    Private tabledt_mafiliacion1 As dt_mafiliacion1DataTable
    
    Private tabledt_mafiliacion2 As dt_mafiliacion2DataTable
    
    Private tabledt_mafiliacion3 As dt_mafiliacion3DataTable
    
    Private tabledt_Cursos2 As dt_Cursos2DataTable
    
    Private tabledt_Cursos3 As dt_Cursos3DataTable
    
    Private tabledt_Cursos4 As dt_Cursos4DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dt_Solicitud")) Is Nothing) Then
                MyBase.Tables.Add(New dt_SolicitudDataTable(ds.Tables("dt_Solicitud")))
            End If
            If (Not (ds.Tables("dt_Datos")) Is Nothing) Then
                MyBase.Tables.Add(New dt_DatosDataTable(ds.Tables("dt_Datos")))
            End If
            If (Not (ds.Tables("Dt_DatosE")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_DatosEDataTable(ds.Tables("Dt_DatosE")))
            End If
            If (Not (ds.Tables("Dt_DatosF")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_DatosFDataTable(ds.Tables("Dt_DatosF")))
            End If
            If (Not (ds.Tables("Dt_Padre")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_PadreDataTable(ds.Tables("Dt_Padre")))
            End If
            If (Not (ds.Tables("Dt_Madre")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_MadreDataTable(ds.Tables("Dt_Madre")))
            End If
            If (Not (ds.Tables("Dt_Hermanos")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_HermanosDataTable(ds.Tables("Dt_Hermanos")))
            End If
            If (Not (ds.Tables("Dt_Rasgos")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_RasgosDataTable(ds.Tables("Dt_Rasgos")))
            End If
            If (Not (ds.Tables("dt_EmpleoAnt1")) Is Nothing) Then
                MyBase.Tables.Add(New dt_EmpleoAnt1DataTable(ds.Tables("dt_EmpleoAnt1")))
            End If
            If (Not (ds.Tables("dt_EmpleoAnt2")) Is Nothing) Then
                MyBase.Tables.Add(New dt_EmpleoAnt2DataTable(ds.Tables("dt_EmpleoAnt2")))
            End If
            If (Not (ds.Tables("dt_EmpleoAnt3")) Is Nothing) Then
                MyBase.Tables.Add(New dt_EmpleoAnt3DataTable(ds.Tables("dt_EmpleoAnt3")))
            End If
            If (Not (ds.Tables("dt_EmpleoAnt4")) Is Nothing) Then
                MyBase.Tables.Add(New dt_EmpleoAnt4DataTable(ds.Tables("dt_EmpleoAnt4")))
            End If
            If (Not (ds.Tables("dt_Referencias")) Is Nothing) Then
                MyBase.Tables.Add(New dt_ReferenciasDataTable(ds.Tables("dt_Referencias")))
            End If
            If (Not (ds.Tables("dt_Iengresos")) Is Nothing) Then
                MyBase.Tables.Add(New dt_IengresosDataTable(ds.Tables("dt_Iengresos")))
            End If
            If (Not (ds.Tables("dt_Cursos1")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Cursos1DataTable(ds.Tables("dt_Cursos1")))
            End If
            If (Not (ds.Tables("dt_mafiliacion1")) Is Nothing) Then
                MyBase.Tables.Add(New dt_mafiliacion1DataTable(ds.Tables("dt_mafiliacion1")))
            End If
            If (Not (ds.Tables("dt_mafiliacion2")) Is Nothing) Then
                MyBase.Tables.Add(New dt_mafiliacion2DataTable(ds.Tables("dt_mafiliacion2")))
            End If
            If (Not (ds.Tables("dt_mafiliacion3")) Is Nothing) Then
                MyBase.Tables.Add(New dt_mafiliacion3DataTable(ds.Tables("dt_mafiliacion3")))
            End If
            If (Not (ds.Tables("dt_Cursos2")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Cursos2DataTable(ds.Tables("dt_Cursos2")))
            End If
            If (Not (ds.Tables("dt_Cursos3")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Cursos3DataTable(ds.Tables("dt_Cursos3")))
            End If
            If (Not (ds.Tables("dt_Cursos4")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Cursos4DataTable(ds.Tables("dt_Cursos4")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Solicitud() As dt_SolicitudDataTable
        Get
            Return Me.tabledt_Solicitud
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Datos() As dt_DatosDataTable
        Get
            Return Me.tabledt_Datos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dt_DatosE() As Dt_DatosEDataTable
        Get
            Return Me.tableDt_DatosE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dt_DatosF() As Dt_DatosFDataTable
        Get
            Return Me.tableDt_DatosF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dt_Padre() As Dt_PadreDataTable
        Get
            Return Me.tableDt_Padre
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dt_Madre() As Dt_MadreDataTable
        Get
            Return Me.tableDt_Madre
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dt_Hermanos() As Dt_HermanosDataTable
        Get
            Return Me.tableDt_Hermanos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dt_Rasgos() As Dt_RasgosDataTable
        Get
            Return Me.tableDt_Rasgos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_EmpleoAnt1() As dt_EmpleoAnt1DataTable
        Get
            Return Me.tabledt_EmpleoAnt1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_EmpleoAnt2() As dt_EmpleoAnt2DataTable
        Get
            Return Me.tabledt_EmpleoAnt2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_EmpleoAnt3() As dt_EmpleoAnt3DataTable
        Get
            Return Me.tabledt_EmpleoAnt3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_EmpleoAnt4() As dt_EmpleoAnt4DataTable
        Get
            Return Me.tabledt_EmpleoAnt4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Referencias() As dt_ReferenciasDataTable
        Get
            Return Me.tabledt_Referencias
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Iengresos() As dt_IengresosDataTable
        Get
            Return Me.tabledt_Iengresos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Cursos1() As dt_Cursos1DataTable
        Get
            Return Me.tabledt_Cursos1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_mafiliacion1() As dt_mafiliacion1DataTable
        Get
            Return Me.tabledt_mafiliacion1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_mafiliacion2() As dt_mafiliacion2DataTable
        Get
            Return Me.tabledt_mafiliacion2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_mafiliacion3() As dt_mafiliacion3DataTable
        Get
            Return Me.tabledt_mafiliacion3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Cursos2() As dt_Cursos2DataTable
        Get
            Return Me.tabledt_Cursos2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Cursos3() As dt_Cursos3DataTable
        Get
            Return Me.tabledt_Cursos3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Cursos4() As dt_Cursos4DataTable
        Get
            Return Me.tabledt_Cursos4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ds_Solicitud = CType(MyBase.Clone,ds_Solicitud)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dt_Solicitud")) Is Nothing) Then
                MyBase.Tables.Add(New dt_SolicitudDataTable(ds.Tables("dt_Solicitud")))
            End If
            If (Not (ds.Tables("dt_Datos")) Is Nothing) Then
                MyBase.Tables.Add(New dt_DatosDataTable(ds.Tables("dt_Datos")))
            End If
            If (Not (ds.Tables("Dt_DatosE")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_DatosEDataTable(ds.Tables("Dt_DatosE")))
            End If
            If (Not (ds.Tables("Dt_DatosF")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_DatosFDataTable(ds.Tables("Dt_DatosF")))
            End If
            If (Not (ds.Tables("Dt_Padre")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_PadreDataTable(ds.Tables("Dt_Padre")))
            End If
            If (Not (ds.Tables("Dt_Madre")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_MadreDataTable(ds.Tables("Dt_Madre")))
            End If
            If (Not (ds.Tables("Dt_Hermanos")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_HermanosDataTable(ds.Tables("Dt_Hermanos")))
            End If
            If (Not (ds.Tables("Dt_Rasgos")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_RasgosDataTable(ds.Tables("Dt_Rasgos")))
            End If
            If (Not (ds.Tables("dt_EmpleoAnt1")) Is Nothing) Then
                MyBase.Tables.Add(New dt_EmpleoAnt1DataTable(ds.Tables("dt_EmpleoAnt1")))
            End If
            If (Not (ds.Tables("dt_EmpleoAnt2")) Is Nothing) Then
                MyBase.Tables.Add(New dt_EmpleoAnt2DataTable(ds.Tables("dt_EmpleoAnt2")))
            End If
            If (Not (ds.Tables("dt_EmpleoAnt3")) Is Nothing) Then
                MyBase.Tables.Add(New dt_EmpleoAnt3DataTable(ds.Tables("dt_EmpleoAnt3")))
            End If
            If (Not (ds.Tables("dt_EmpleoAnt4")) Is Nothing) Then
                MyBase.Tables.Add(New dt_EmpleoAnt4DataTable(ds.Tables("dt_EmpleoAnt4")))
            End If
            If (Not (ds.Tables("dt_Referencias")) Is Nothing) Then
                MyBase.Tables.Add(New dt_ReferenciasDataTable(ds.Tables("dt_Referencias")))
            End If
            If (Not (ds.Tables("dt_Iengresos")) Is Nothing) Then
                MyBase.Tables.Add(New dt_IengresosDataTable(ds.Tables("dt_Iengresos")))
            End If
            If (Not (ds.Tables("dt_Cursos1")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Cursos1DataTable(ds.Tables("dt_Cursos1")))
            End If
            If (Not (ds.Tables("dt_mafiliacion1")) Is Nothing) Then
                MyBase.Tables.Add(New dt_mafiliacion1DataTable(ds.Tables("dt_mafiliacion1")))
            End If
            If (Not (ds.Tables("dt_mafiliacion2")) Is Nothing) Then
                MyBase.Tables.Add(New dt_mafiliacion2DataTable(ds.Tables("dt_mafiliacion2")))
            End If
            If (Not (ds.Tables("dt_mafiliacion3")) Is Nothing) Then
                MyBase.Tables.Add(New dt_mafiliacion3DataTable(ds.Tables("dt_mafiliacion3")))
            End If
            If (Not (ds.Tables("dt_Cursos2")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Cursos2DataTable(ds.Tables("dt_Cursos2")))
            End If
            If (Not (ds.Tables("dt_Cursos3")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Cursos3DataTable(ds.Tables("dt_Cursos3")))
            End If
            If (Not (ds.Tables("dt_Cursos4")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Cursos4DataTable(ds.Tables("dt_Cursos4")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledt_Solicitud = CType(MyBase.Tables("dt_Solicitud"),dt_SolicitudDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Solicitud) Is Nothing) Then
                Me.tabledt_Solicitud.InitVars
            End If
        End If
        Me.tabledt_Datos = CType(MyBase.Tables("dt_Datos"),dt_DatosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Datos) Is Nothing) Then
                Me.tabledt_Datos.InitVars
            End If
        End If
        Me.tableDt_DatosE = CType(MyBase.Tables("Dt_DatosE"),Dt_DatosEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDt_DatosE) Is Nothing) Then
                Me.tableDt_DatosE.InitVars
            End If
        End If
        Me.tableDt_DatosF = CType(MyBase.Tables("Dt_DatosF"),Dt_DatosFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDt_DatosF) Is Nothing) Then
                Me.tableDt_DatosF.InitVars
            End If
        End If
        Me.tableDt_Padre = CType(MyBase.Tables("Dt_Padre"),Dt_PadreDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDt_Padre) Is Nothing) Then
                Me.tableDt_Padre.InitVars
            End If
        End If
        Me.tableDt_Madre = CType(MyBase.Tables("Dt_Madre"),Dt_MadreDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDt_Madre) Is Nothing) Then
                Me.tableDt_Madre.InitVars
            End If
        End If
        Me.tableDt_Hermanos = CType(MyBase.Tables("Dt_Hermanos"),Dt_HermanosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDt_Hermanos) Is Nothing) Then
                Me.tableDt_Hermanos.InitVars
            End If
        End If
        Me.tableDt_Rasgos = CType(MyBase.Tables("Dt_Rasgos"),Dt_RasgosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDt_Rasgos) Is Nothing) Then
                Me.tableDt_Rasgos.InitVars
            End If
        End If
        Me.tabledt_EmpleoAnt1 = CType(MyBase.Tables("dt_EmpleoAnt1"),dt_EmpleoAnt1DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_EmpleoAnt1) Is Nothing) Then
                Me.tabledt_EmpleoAnt1.InitVars
            End If
        End If
        Me.tabledt_EmpleoAnt2 = CType(MyBase.Tables("dt_EmpleoAnt2"),dt_EmpleoAnt2DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_EmpleoAnt2) Is Nothing) Then
                Me.tabledt_EmpleoAnt2.InitVars
            End If
        End If
        Me.tabledt_EmpleoAnt3 = CType(MyBase.Tables("dt_EmpleoAnt3"),dt_EmpleoAnt3DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_EmpleoAnt3) Is Nothing) Then
                Me.tabledt_EmpleoAnt3.InitVars
            End If
        End If
        Me.tabledt_EmpleoAnt4 = CType(MyBase.Tables("dt_EmpleoAnt4"),dt_EmpleoAnt4DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_EmpleoAnt4) Is Nothing) Then
                Me.tabledt_EmpleoAnt4.InitVars
            End If
        End If
        Me.tabledt_Referencias = CType(MyBase.Tables("dt_Referencias"),dt_ReferenciasDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Referencias) Is Nothing) Then
                Me.tabledt_Referencias.InitVars
            End If
        End If
        Me.tabledt_Iengresos = CType(MyBase.Tables("dt_Iengresos"),dt_IengresosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Iengresos) Is Nothing) Then
                Me.tabledt_Iengresos.InitVars
            End If
        End If
        Me.tabledt_Cursos1 = CType(MyBase.Tables("dt_Cursos1"),dt_Cursos1DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Cursos1) Is Nothing) Then
                Me.tabledt_Cursos1.InitVars
            End If
        End If
        Me.tabledt_mafiliacion1 = CType(MyBase.Tables("dt_mafiliacion1"),dt_mafiliacion1DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_mafiliacion1) Is Nothing) Then
                Me.tabledt_mafiliacion1.InitVars
            End If
        End If
        Me.tabledt_mafiliacion2 = CType(MyBase.Tables("dt_mafiliacion2"),dt_mafiliacion2DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_mafiliacion2) Is Nothing) Then
                Me.tabledt_mafiliacion2.InitVars
            End If
        End If
        Me.tabledt_mafiliacion3 = CType(MyBase.Tables("dt_mafiliacion3"),dt_mafiliacion3DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_mafiliacion3) Is Nothing) Then
                Me.tabledt_mafiliacion3.InitVars
            End If
        End If
        Me.tabledt_Cursos2 = CType(MyBase.Tables("dt_Cursos2"),dt_Cursos2DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Cursos2) Is Nothing) Then
                Me.tabledt_Cursos2.InitVars
            End If
        End If
        Me.tabledt_Cursos3 = CType(MyBase.Tables("dt_Cursos3"),dt_Cursos3DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Cursos3) Is Nothing) Then
                Me.tabledt_Cursos3.InitVars
            End If
        End If
        Me.tabledt_Cursos4 = CType(MyBase.Tables("dt_Cursos4"),dt_Cursos4DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Cursos4) Is Nothing) Then
                Me.tabledt_Cursos4.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ds_Solicitud"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_Solicitud.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledt_Solicitud = New dt_SolicitudDataTable
        MyBase.Tables.Add(Me.tabledt_Solicitud)
        Me.tabledt_Datos = New dt_DatosDataTable
        MyBase.Tables.Add(Me.tabledt_Datos)
        Me.tableDt_DatosE = New Dt_DatosEDataTable
        MyBase.Tables.Add(Me.tableDt_DatosE)
        Me.tableDt_DatosF = New Dt_DatosFDataTable
        MyBase.Tables.Add(Me.tableDt_DatosF)
        Me.tableDt_Padre = New Dt_PadreDataTable
        MyBase.Tables.Add(Me.tableDt_Padre)
        Me.tableDt_Madre = New Dt_MadreDataTable
        MyBase.Tables.Add(Me.tableDt_Madre)
        Me.tableDt_Hermanos = New Dt_HermanosDataTable
        MyBase.Tables.Add(Me.tableDt_Hermanos)
        Me.tableDt_Rasgos = New Dt_RasgosDataTable
        MyBase.Tables.Add(Me.tableDt_Rasgos)
        Me.tabledt_EmpleoAnt1 = New dt_EmpleoAnt1DataTable
        MyBase.Tables.Add(Me.tabledt_EmpleoAnt1)
        Me.tabledt_EmpleoAnt2 = New dt_EmpleoAnt2DataTable
        MyBase.Tables.Add(Me.tabledt_EmpleoAnt2)
        Me.tabledt_EmpleoAnt3 = New dt_EmpleoAnt3DataTable
        MyBase.Tables.Add(Me.tabledt_EmpleoAnt3)
        Me.tabledt_EmpleoAnt4 = New dt_EmpleoAnt4DataTable
        MyBase.Tables.Add(Me.tabledt_EmpleoAnt4)
        Me.tabledt_Referencias = New dt_ReferenciasDataTable
        MyBase.Tables.Add(Me.tabledt_Referencias)
        Me.tabledt_Iengresos = New dt_IengresosDataTable
        MyBase.Tables.Add(Me.tabledt_Iengresos)
        Me.tabledt_Cursos1 = New dt_Cursos1DataTable
        MyBase.Tables.Add(Me.tabledt_Cursos1)
        Me.tabledt_mafiliacion1 = New dt_mafiliacion1DataTable
        MyBase.Tables.Add(Me.tabledt_mafiliacion1)
        Me.tabledt_mafiliacion2 = New dt_mafiliacion2DataTable
        MyBase.Tables.Add(Me.tabledt_mafiliacion2)
        Me.tabledt_mafiliacion3 = New dt_mafiliacion3DataTable
        MyBase.Tables.Add(Me.tabledt_mafiliacion3)
        Me.tabledt_Cursos2 = New dt_Cursos2DataTable
        MyBase.Tables.Add(Me.tabledt_Cursos2)
        Me.tabledt_Cursos3 = New dt_Cursos3DataTable
        MyBase.Tables.Add(Me.tabledt_Cursos3)
        Me.tabledt_Cursos4 = New dt_Cursos4DataTable
        MyBase.Tables.Add(Me.tabledt_Cursos4)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Solicitud() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Datos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDt_DatosE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDt_DatosF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDt_Padre() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDt_Madre() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDt_Hermanos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDt_Rasgos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_EmpleoAnt1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_EmpleoAnt2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_EmpleoAnt3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_EmpleoAnt4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Referencias() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Iengresos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Cursos1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_mafiliacion1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_mafiliacion2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_mafiliacion3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Cursos2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Cursos3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Cursos4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ds_Solicitud = New ds_Solicitud
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dt_SolicitudRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_SolicitudRowChangeEvent)
    
    Public Delegate Sub dt_DatosRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_DatosRowChangeEvent)
    
    Public Delegate Sub Dt_DatosERowChangeEventHandler(ByVal sender As Object, ByVal e As Dt_DatosERowChangeEvent)
    
    Public Delegate Sub Dt_DatosFRowChangeEventHandler(ByVal sender As Object, ByVal e As Dt_DatosFRowChangeEvent)
    
    Public Delegate Sub Dt_PadreRowChangeEventHandler(ByVal sender As Object, ByVal e As Dt_PadreRowChangeEvent)
    
    Public Delegate Sub Dt_MadreRowChangeEventHandler(ByVal sender As Object, ByVal e As Dt_MadreRowChangeEvent)
    
    Public Delegate Sub Dt_HermanosRowChangeEventHandler(ByVal sender As Object, ByVal e As Dt_HermanosRowChangeEvent)
    
    Public Delegate Sub Dt_RasgosRowChangeEventHandler(ByVal sender As Object, ByVal e As Dt_RasgosRowChangeEvent)
    
    Public Delegate Sub dt_EmpleoAnt1RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_EmpleoAnt1RowChangeEvent)
    
    Public Delegate Sub dt_EmpleoAnt2RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_EmpleoAnt2RowChangeEvent)
    
    Public Delegate Sub dt_EmpleoAnt3RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_EmpleoAnt3RowChangeEvent)
    
    Public Delegate Sub dt_EmpleoAnt4RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_EmpleoAnt4RowChangeEvent)
    
    Public Delegate Sub dt_ReferenciasRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_ReferenciasRowChangeEvent)
    
    Public Delegate Sub dt_IengresosRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_IengresosRowChangeEvent)
    
    Public Delegate Sub dt_Cursos1RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_Cursos1RowChangeEvent)
    
    Public Delegate Sub dt_mafiliacion1RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_mafiliacion1RowChangeEvent)
    
    Public Delegate Sub dt_mafiliacion2RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_mafiliacion2RowChangeEvent)
    
    Public Delegate Sub dt_mafiliacion3RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_mafiliacion3RowChangeEvent)
    
    Public Delegate Sub dt_Cursos2RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_Cursos2RowChangeEvent)
    
    Public Delegate Sub dt_Cursos3RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_Cursos3RowChangeEvent)
    
    Public Delegate Sub dt_Cursos4RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_Cursos4RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_SolicitudDataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_SolicitudRow)
        
        Private columnId_Empleado As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnLugar_Nacimiento As Global.System.Data.DataColumn
        
        Private columnFotoEmpleado As Global.System.Data.DataColumn
        
        Private columnFechaNac As Global.System.Data.DataColumn
        
        Private columnEstadoCivil As Global.System.Data.DataColumn
        
        Private columnRFC As Global.System.Data.DataColumn
        
        Private columnCURP As Global.System.Data.DataColumn
        
        Private columnIMSS As Global.System.Data.DataColumn
        
        Private columnDomicilio As Global.System.Data.DataColumn
        
        Private columnGradoEscolar As Global.System.Data.DataColumn
        
        Private columnCarrera As Global.System.Data.DataColumn
        
        Private columnPeriodoCarrera As Global.System.Data.DataColumn
        
        Private columnEmpresaAnt As Global.System.Data.DataColumn
        
        Private columnPuestoAnt As Global.System.Data.DataColumn
        
        Private columnPeriodoEmpleo As Global.System.Data.DataColumn
        
        Private columnFIngresoActual As Global.System.Data.DataColumn
        
        Private columnFecha_Visita As Global.System.Data.DataColumn
        
        Private columnAntecedentes_Penales As Global.System.Data.DataColumn
        
        Private columnDemandas As Global.System.Data.DataColumn
        
        Private columnExamen_Medico As Global.System.Data.DataColumn
        
        Private columnAntidoping As Global.System.Data.DataColumn
        
        Private columnFechaAntidoping As Global.System.Data.DataColumn
        
        Private columnEnfermedades As Global.System.Data.DataColumn
        
        Private columnObservacionesGenerales As Global.System.Data.DataColumn
        
        Private columnEstudioSE As Global.System.Data.DataColumn
        
        Private columnConyuge As Global.System.Data.DataColumn
        
        Private columnTelefonoConyuge As Global.System.Data.DataColumn
        
        Private columnLogoEmpresa As Global.System.Data.DataColumn
        
        Private columnNombreEmpresa As Global.System.Data.DataColumn
        
        Private columnTelefonoEmpleado As Global.System.Data.DataColumn
        
        Private columnDomicilioEmpresa As Global.System.Data.DataColumn
        
        Private columnFechaCartaAPenales As Global.System.Data.DataColumn
        
        Private columnFechaExMedico As Global.System.Data.DataColumn
        
        Private columnExamenMedicoObservaciones As Global.System.Data.DataColumn
        
        Private columnAntidopingObservaciones As Global.System.Data.DataColumn
        
        Private columnPsicometrico As Global.System.Data.DataColumn
        
        Private columnFechaPsicometrico As Global.System.Data.DataColumn
        
        Private columnPsicometricoObservaciones As Global.System.Data.DataColumn
        
        Private columnClave_Empleado As Global.System.Data.DataColumn
        
        Private columnMunicipioVive As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Solicitud"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Lugar_NacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLugar_Nacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FotoEmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFotoEmpleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoCivilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoCivil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMSS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomicilioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradoEscolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGradoEscolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CarreraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCarrera
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoCarreraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodoCarrera
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpresaAntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpresaAnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoAntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuestoAnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoEmpleoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodoEmpleo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIngresoActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIngresoActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_VisitaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Visita
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Antecedentes_PenalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAntecedentes_Penales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemandasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemandas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Examen_MedicoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExamen_Medico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AntidopingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAntidoping
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAntidopingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAntidoping
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnfermedadesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnfermedades
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesGeneralesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacionesGenerales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstudioSEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstudioSE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConyugeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConyuge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoConyugeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoConyuge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogoEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoEmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoEmpleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomicilioEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilioEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCartaAPenalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCartaAPenales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaExMedicoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaExMedico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExamenMedicoObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExamenMedicoObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AntidopingObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAntidopingObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PsicometricoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPsicometrico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaPsicometricoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaPsicometrico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PsicometricoObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPsicometricoObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Clave_EmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave_Empleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MunicipioViveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMunicipioVive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_SolicitudRow
            Get
                Return CType(Me.Rows(index),dt_SolicitudRow)
            End Get
        End Property
        
        Public Event dt_SolicitudRowChanging As dt_SolicitudRowChangeEventHandler
        
        Public Event dt_SolicitudRowChanged As dt_SolicitudRowChangeEventHandler
        
        Public Event dt_SolicitudRowDeleting As dt_SolicitudRowChangeEventHandler
        
        Public Event dt_SolicitudRowDeleted As dt_SolicitudRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_SolicitudRow(ByVal row As dt_SolicitudRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_SolicitudRow( _
                    ByVal Id_Empleado As Long,  _
                    ByVal Nombre As String,  _
                    ByVal Lugar_Nacimiento As String,  _
                    ByVal FotoEmpleado() As Byte,  _
                    ByVal FechaNac As String,  _
                    ByVal EstadoCivil As String,  _
                    ByVal RFC As String,  _
                    ByVal CURP As String,  _
                    ByVal IMSS As String,  _
                    ByVal Domicilio As String,  _
                    ByVal GradoEscolar As String,  _
                    ByVal Carrera As String,  _
                    ByVal PeriodoCarrera As String,  _
                    ByVal EmpresaAnt As String,  _
                    ByVal PuestoAnt As String,  _
                    ByVal PeriodoEmpleo As String,  _
                    ByVal FIngresoActual As String,  _
                    ByVal Fecha_Visita As String,  _
                    ByVal Antecedentes_Penales As String,  _
                    ByVal Demandas As String,  _
                    ByVal Examen_Medico As String,  _
                    ByVal Antidoping As String,  _
                    ByVal FechaAntidoping As String,  _
                    ByVal Enfermedades As String,  _
                    ByVal ObservacionesGenerales As String,  _
                    ByVal EstudioSE As String,  _
                    ByVal Conyuge As String,  _
                    ByVal TelefonoConyuge As String,  _
                    ByVal LogoEmpresa() As Byte,  _
                    ByVal NombreEmpresa As String,  _
                    ByVal TelefonoEmpleado As String,  _
                    ByVal DomicilioEmpresa As String,  _
                    ByVal FechaCartaAPenales As String,  _
                    ByVal FechaExMedico As String,  _
                    ByVal ExamenMedicoObservaciones As String,  _
                    ByVal AntidopingObservaciones As String,  _
                    ByVal Psicometrico As String,  _
                    ByVal FechaPsicometrico As String,  _
                    ByVal PsicometricoObservaciones As String,  _
                    ByVal Clave_Empleado As String,  _
                    ByVal MunicipioVive As String) As dt_SolicitudRow
            Dim rowdt_SolicitudRow As dt_SolicitudRow = CType(Me.NewRow,dt_SolicitudRow)
            Dim columnValuesArray() As Object = New Object() {Id_Empleado, Nombre, Lugar_Nacimiento, FotoEmpleado, FechaNac, EstadoCivil, RFC, CURP, IMSS, Domicilio, GradoEscolar, Carrera, PeriodoCarrera, EmpresaAnt, PuestoAnt, PeriodoEmpleo, FIngresoActual, Fecha_Visita, Antecedentes_Penales, Demandas, Examen_Medico, Antidoping, FechaAntidoping, Enfermedades, ObservacionesGenerales, EstudioSE, Conyuge, TelefonoConyuge, LogoEmpresa, NombreEmpresa, TelefonoEmpleado, DomicilioEmpresa, FechaCartaAPenales, FechaExMedico, ExamenMedicoObservaciones, AntidopingObservaciones, Psicometrico, FechaPsicometrico, PsicometricoObservaciones, Clave_Empleado, MunicipioVive}
            rowdt_SolicitudRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_SolicitudRow)
            Return rowdt_SolicitudRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_SolicitudDataTable = CType(MyBase.Clone,dt_SolicitudDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_SolicitudDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Empleado = MyBase.Columns("Id_Empleado")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnLugar_Nacimiento = MyBase.Columns("Lugar_Nacimiento")
            Me.columnFotoEmpleado = MyBase.Columns("FotoEmpleado")
            Me.columnFechaNac = MyBase.Columns("FechaNac")
            Me.columnEstadoCivil = MyBase.Columns("EstadoCivil")
            Me.columnRFC = MyBase.Columns("RFC")
            Me.columnCURP = MyBase.Columns("CURP")
            Me.columnIMSS = MyBase.Columns("IMSS")
            Me.columnDomicilio = MyBase.Columns("Domicilio")
            Me.columnGradoEscolar = MyBase.Columns("GradoEscolar")
            Me.columnCarrera = MyBase.Columns("Carrera")
            Me.columnPeriodoCarrera = MyBase.Columns("PeriodoCarrera")
            Me.columnEmpresaAnt = MyBase.Columns("EmpresaAnt")
            Me.columnPuestoAnt = MyBase.Columns("PuestoAnt")
            Me.columnPeriodoEmpleo = MyBase.Columns("PeriodoEmpleo")
            Me.columnFIngresoActual = MyBase.Columns("FIngresoActual")
            Me.columnFecha_Visita = MyBase.Columns("Fecha_Visita")
            Me.columnAntecedentes_Penales = MyBase.Columns("Antecedentes_Penales")
            Me.columnDemandas = MyBase.Columns("Demandas")
            Me.columnExamen_Medico = MyBase.Columns("Examen_Medico")
            Me.columnAntidoping = MyBase.Columns("Antidoping")
            Me.columnFechaAntidoping = MyBase.Columns("FechaAntidoping")
            Me.columnEnfermedades = MyBase.Columns("Enfermedades")
            Me.columnObservacionesGenerales = MyBase.Columns("ObservacionesGenerales")
            Me.columnEstudioSE = MyBase.Columns("EstudioSE")
            Me.columnConyuge = MyBase.Columns("Conyuge")
            Me.columnTelefonoConyuge = MyBase.Columns("TelefonoConyuge")
            Me.columnLogoEmpresa = MyBase.Columns("LogoEmpresa")
            Me.columnNombreEmpresa = MyBase.Columns("NombreEmpresa")
            Me.columnTelefonoEmpleado = MyBase.Columns("TelefonoEmpleado")
            Me.columnDomicilioEmpresa = MyBase.Columns("DomicilioEmpresa")
            Me.columnFechaCartaAPenales = MyBase.Columns("FechaCartaAPenales")
            Me.columnFechaExMedico = MyBase.Columns("FechaExMedico")
            Me.columnExamenMedicoObservaciones = MyBase.Columns("ExamenMedicoObservaciones")
            Me.columnAntidopingObservaciones = MyBase.Columns("AntidopingObservaciones")
            Me.columnPsicometrico = MyBase.Columns("Psicometrico")
            Me.columnFechaPsicometrico = MyBase.Columns("FechaPsicometrico")
            Me.columnPsicometricoObservaciones = MyBase.Columns("PsicometricoObservaciones")
            Me.columnClave_Empleado = MyBase.Columns("Clave_Empleado")
            Me.columnMunicipioVive = MyBase.Columns("MunicipioVive")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Empleado = New Global.System.Data.DataColumn("Id_Empleado", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Empleado)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnLugar_Nacimiento = New Global.System.Data.DataColumn("Lugar_Nacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLugar_Nacimiento)
            Me.columnFotoEmpleado = New Global.System.Data.DataColumn("FotoEmpleado", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFotoEmpleado)
            Me.columnFechaNac = New Global.System.Data.DataColumn("FechaNac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNac)
            Me.columnEstadoCivil = New Global.System.Data.DataColumn("EstadoCivil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoCivil)
            Me.columnRFC = New Global.System.Data.DataColumn("RFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRFC)
            Me.columnCURP = New Global.System.Data.DataColumn("CURP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURP)
            Me.columnIMSS = New Global.System.Data.DataColumn("IMSS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMSS)
            Me.columnDomicilio = New Global.System.Data.DataColumn("Domicilio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio)
            Me.columnGradoEscolar = New Global.System.Data.DataColumn("GradoEscolar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGradoEscolar)
            Me.columnCarrera = New Global.System.Data.DataColumn("Carrera", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCarrera)
            Me.columnPeriodoCarrera = New Global.System.Data.DataColumn("PeriodoCarrera", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodoCarrera)
            Me.columnEmpresaAnt = New Global.System.Data.DataColumn("EmpresaAnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpresaAnt)
            Me.columnPuestoAnt = New Global.System.Data.DataColumn("PuestoAnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuestoAnt)
            Me.columnPeriodoEmpleo = New Global.System.Data.DataColumn("PeriodoEmpleo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodoEmpleo)
            Me.columnFIngresoActual = New Global.System.Data.DataColumn("FIngresoActual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIngresoActual)
            Me.columnFecha_Visita = New Global.System.Data.DataColumn("Fecha_Visita", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Visita)
            Me.columnAntecedentes_Penales = New Global.System.Data.DataColumn("Antecedentes_Penales", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAntecedentes_Penales)
            Me.columnDemandas = New Global.System.Data.DataColumn("Demandas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemandas)
            Me.columnExamen_Medico = New Global.System.Data.DataColumn("Examen_Medico", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExamen_Medico)
            Me.columnAntidoping = New Global.System.Data.DataColumn("Antidoping", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAntidoping)
            Me.columnFechaAntidoping = New Global.System.Data.DataColumn("FechaAntidoping", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAntidoping)
            Me.columnEnfermedades = New Global.System.Data.DataColumn("Enfermedades", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnfermedades)
            Me.columnObservacionesGenerales = New Global.System.Data.DataColumn("ObservacionesGenerales", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacionesGenerales)
            Me.columnEstudioSE = New Global.System.Data.DataColumn("EstudioSE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstudioSE)
            Me.columnConyuge = New Global.System.Data.DataColumn("Conyuge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConyuge)
            Me.columnTelefonoConyuge = New Global.System.Data.DataColumn("TelefonoConyuge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoConyuge)
            Me.columnLogoEmpresa = New Global.System.Data.DataColumn("LogoEmpresa", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogoEmpresa)
            Me.columnNombreEmpresa = New Global.System.Data.DataColumn("NombreEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresa)
            Me.columnTelefonoEmpleado = New Global.System.Data.DataColumn("TelefonoEmpleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoEmpleado)
            Me.columnDomicilioEmpresa = New Global.System.Data.DataColumn("DomicilioEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilioEmpresa)
            Me.columnFechaCartaAPenales = New Global.System.Data.DataColumn("FechaCartaAPenales", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCartaAPenales)
            Me.columnFechaExMedico = New Global.System.Data.DataColumn("FechaExMedico", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaExMedico)
            Me.columnExamenMedicoObservaciones = New Global.System.Data.DataColumn("ExamenMedicoObservaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExamenMedicoObservaciones)
            Me.columnAntidopingObservaciones = New Global.System.Data.DataColumn("AntidopingObservaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAntidopingObservaciones)
            Me.columnPsicometrico = New Global.System.Data.DataColumn("Psicometrico", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPsicometrico)
            Me.columnFechaPsicometrico = New Global.System.Data.DataColumn("FechaPsicometrico", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaPsicometrico)
            Me.columnPsicometricoObservaciones = New Global.System.Data.DataColumn("PsicometricoObservaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPsicometricoObservaciones)
            Me.columnClave_Empleado = New Global.System.Data.DataColumn("Clave_Empleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave_Empleado)
            Me.columnMunicipioVive = New Global.System.Data.DataColumn("MunicipioVive", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMunicipioVive)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_SolicitudRow() As dt_SolicitudRow
            Return CType(Me.NewRow,dt_SolicitudRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_SolicitudRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_SolicitudRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_SolicitudRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_SolicitudRowChanged(Me, New dt_SolicitudRowChangeEvent(CType(e.Row,dt_SolicitudRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_SolicitudRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_SolicitudRowChanging(Me, New dt_SolicitudRowChangeEvent(CType(e.Row,dt_SolicitudRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_SolicitudRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_SolicitudRowDeleted(Me, New dt_SolicitudRowChangeEvent(CType(e.Row,dt_SolicitudRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_SolicitudRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_SolicitudRowDeleting(Me, New dt_SolicitudRowChangeEvent(CType(e.Row,dt_SolicitudRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_SolicitudRow(ByVal row As dt_SolicitudRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_SolicitudDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_DatosDataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_DatosRow)
        
        Private columnId_Empleado As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombreCompleto As Global.System.Data.DataColumn
        
        Private columnId_Departamento As Global.System.Data.DataColumn
        
        Private columnDepartamento As Global.System.Data.DataColumn
        
        Private columnId_Puesto As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnId_EstadoCivil As Global.System.Data.DataColumn
        
        Private columnMail As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnSexo As Global.System.Data.DataColumn
        
        Private columnSaldo_Vacaciones As Global.System.Data.DataColumn
        
        Private columnSueldoBase As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnNumeroExterior As Global.System.Data.DataColumn
        
        Private columnNumeroInterior As Global.System.Data.DataColumn
        
        Private columnColonia As Global.System.Data.DataColumn
        
        Private columnZona As Global.System.Data.DataColumn
        
        Private columnCiudad As Global.System.Data.DataColumn
        
        Private columnCP As Global.System.Data.DataColumn
        
        Private columnLatitud As Global.System.Data.DataColumn
        
        Private columnLongitud As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnTelefonoMovil As Global.System.Data.DataColumn
        
        Private columnFechaNac As Global.System.Data.DataColumn
        
        Private columnLugarNac As Global.System.Data.DataColumn
        
        Private columnCantHijos As Global.System.Data.DataColumn
        
        Private columnRFC As Global.System.Data.DataColumn
        
        Private columnCURP As Global.System.Data.DataColumn
        
        Private columnIMSS As Global.System.Data.DataColumn
        
        Private columnIFE As Global.System.Data.DataColumn
        
        Private columnTipoLicencia As Global.System.Data.DataColumn
        
        Private columnNumCartilla As Global.System.Data.DataColumn
        
        Private columnCertificacion As Global.System.Data.DataColumn
        
        Private columnConFamilia As Global.System.Data.DataColumn
        
        Private columnVicios As Global.System.Data.DataColumn
        
        Private columnHabilidades As Global.System.Data.DataColumn
        
        Private columnActivDepCult As Global.System.Data.DataColumn
        
        Private columnIdiomas As Global.System.Data.DataColumn
        
        Private columnViveConFam As Global.System.Data.DataColumn
        
        Private columnCantidadHijos As Global.System.Data.DataColumn
        
        Private columnEdad As Global.System.Data.DataColumn
        
        Private columnFechaIngreso As Global.System.Data.DataColumn
        
        Private columnFechaFin_Labores As Global.System.Data.DataColumn
        
        Private columnAPaterno As Global.System.Data.DataColumn
        
        Private columnAMaterno As Global.System.Data.DataColumn
        
        Private columnNombres As Global.System.Data.DataColumn
        
        Private columnFechaVenceCred As Global.System.Data.DataColumn
        
        Private columnEmpleadoRef As Global.System.Data.DataColumn
        
        Private columnEntreCalle1 As Global.System.Data.DataColumn
        
        Private columnEntreCalle2 As Global.System.Data.DataColumn
        
        Private columnModoNacionalidad As Global.System.Data.DataColumn
        
        Private columnPaisNacimiento As Global.System.Data.DataColumn
        
        Private columnFechaNaturalizacion As Global.System.Data.DataColumn
        
        Private columnPasaporte As Global.System.Data.DataColumn
        
        Private columnJefeArea As Global.System.Data.DataColumn
        
        Private columnUMF As Global.System.Data.DataColumn
        
        Private columnSaleRuta As Global.System.Data.DataColumn
        
        Private columnCreditoInfonavit As Global.System.Data.DataColumn
        
        Private columnVerificaServicios As Global.System.Data.DataColumn
        
        Private columnCiudadNacimiento As Global.System.Data.DataColumn
        
        Private columnEstadoNacimiento As Global.System.Data.DataColumn
        
        Private columnPaisNac As Global.System.Data.DataColumn
        
        Private columnId_ModoContactoD As Global.System.Data.DataColumn
        
        Private columnId_ModoContacto As Global.System.Data.DataColumn
        
        Private columnId_EmpleadoP As Global.System.Data.DataColumn
        
        Private columnCUIP As Global.System.Data.DataColumn
        
        Private columnMail_Personal As Global.System.Data.DataColumn
        
        Private columnPorte_Armas As Global.System.Data.DataColumn
        
        Private columnFechaActualiza As Global.System.Data.DataColumn
        
        Private columnNumero_Credito As Global.System.Data.DataColumn
        
        Private columnTipo_Descuento As Global.System.Data.DataColumn
        
        Private columnMonto_Descuento As Global.System.Data.DataColumn
        
        Private columnVence_Licencia As Global.System.Data.DataColumn
        
        Private columnModocontacto As Global.System.Data.DataColumn
        
        Private columnLicenciaConducir As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Datos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCompletoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCompleto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_DepartamentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Departamento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartamentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Puesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EstadoCivilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_EstadoCivil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Saldo_VacacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo_Vacaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SueldoBaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSueldoBase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroExteriorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroExterior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroInteriorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroInterior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColoniaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColonia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiudadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiudad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LatitudColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLatitud
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLongitud
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoMovilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoMovil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LugarNacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLugarNac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantHijosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantHijos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMSS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoLicenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoLicencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumCartillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumCartilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CertificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConFamiliaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConFamilia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViciosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVicios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HabilidadesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHabilidades
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActivDepCultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActivDepCult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdiomasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdiomas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViveConFamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnViveConFam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadHijosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadHijos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EdadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaIngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFin_LaboresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFin_Labores
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APaternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPaterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMaternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMaterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaVenceCredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaVenceCred
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpleadoRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpleadoRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntreCalle1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntreCalle1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntreCalle2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntreCalle2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModoNacionalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModoNacionalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaisNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaisNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNaturalizacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNaturalizacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasaporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasaporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JefeAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJefeArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UMFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUMF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaleRutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaleRuta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditoInfonavitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditoInfonavit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerificaServiciosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerificaServicios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiudadNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiudadNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaisNacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaisNac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_ModoContactoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_ModoContactoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_ModoContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_ModoContacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_EmpleadoP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mail_PersonalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMail_Personal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Porte_ArmasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorte_Armas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaActualizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaActualiza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Numero_CreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero_Credito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_DescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_Descuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Monto_DescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto_Descuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vence_LicenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVence_Licencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModocontactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModocontacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LicenciaConducirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLicenciaConducir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_DatosRow
            Get
                Return CType(Me.Rows(index),dt_DatosRow)
            End Get
        End Property
        
        Public Event dt_DatosRowChanging As dt_DatosRowChangeEventHandler
        
        Public Event dt_DatosRowChanged As dt_DatosRowChangeEventHandler
        
        Public Event dt_DatosRowDeleting As dt_DatosRowChangeEventHandler
        
        Public Event dt_DatosRowDeleted As dt_DatosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_DatosRow(ByVal row As dt_DatosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_DatosRow( _
                    ByVal Id_Empleado As Long,  _
                    ByVal Clave As String,  _
                    ByVal NombreCompleto As String,  _
                    ByVal Id_Departamento As String,  _
                    ByVal Departamento As String,  _
                    ByVal Id_Puesto As String,  _
                    ByVal Puesto As String,  _
                    ByVal Id_EstadoCivil As String,  _
                    ByVal Mail As String,  _
                    ByVal Status As String,  _
                    ByVal Sexo As String,  _
                    ByVal Saldo_Vacaciones As String,  _
                    ByVal SueldoBase As String,  _
                    ByVal Calle As String,  _
                    ByVal NumeroExterior As String,  _
                    ByVal NumeroInterior As String,  _
                    ByVal Colonia As String,  _
                    ByVal Zona As String,  _
                    ByVal Ciudad As String,  _
                    ByVal CP As String,  _
                    ByVal Latitud As String,  _
                    ByVal Longitud As String,  _
                    ByVal Telefono As String,  _
                    ByVal TelefonoMovil As String,  _
                    ByVal FechaNac As String,  _
                    ByVal LugarNac As String,  _
                    ByVal CantHijos As String,  _
                    ByVal RFC As String,  _
                    ByVal CURP As String,  _
                    ByVal IMSS As String,  _
                    ByVal IFE As String,  _
                    ByVal TipoLicencia As String,  _
                    ByVal NumCartilla As String,  _
                    ByVal Certificacion As String,  _
                    ByVal ConFamilia As String,  _
                    ByVal Vicios As String,  _
                    ByVal Habilidades As String,  _
                    ByVal ActivDepCult As String,  _
                    ByVal Idiomas As String,  _
                    ByVal ViveConFam As String,  _
                    ByVal CantidadHijos As String,  _
                    ByVal Edad As String,  _
                    ByVal FechaIngreso As String,  _
                    ByVal FechaFin_Labores As String,  _
                    ByVal APaterno As String,  _
                    ByVal AMaterno As String,  _
                    ByVal Nombres As String,  _
                    ByVal FechaVenceCred As String,  _
                    ByVal EmpleadoRef As String,  _
                    ByVal EntreCalle1 As String,  _
                    ByVal EntreCalle2 As String,  _
                    ByVal ModoNacionalidad As String,  _
                    ByVal PaisNacimiento As String,  _
                    ByVal FechaNaturalizacion As String,  _
                    ByVal Pasaporte As String,  _
                    ByVal JefeArea As String,  _
                    ByVal UMF As String,  _
                    ByVal SaleRuta As String,  _
                    ByVal CreditoInfonavit As String,  _
                    ByVal VerificaServicios As String,  _
                    ByVal CiudadNacimiento As String,  _
                    ByVal EstadoNacimiento As String,  _
                    ByVal PaisNac As String,  _
                    ByVal Id_ModoContactoD As String,  _
                    ByVal Id_ModoContacto As String,  _
                    ByVal Id_EmpleadoP As String,  _
                    ByVal CUIP As String,  _
                    ByVal Mail_Personal As String,  _
                    ByVal Porte_Armas As String,  _
                    ByVal FechaActualiza As String,  _
                    ByVal Numero_Credito As String,  _
                    ByVal Tipo_Descuento As String,  _
                    ByVal Monto_Descuento As String,  _
                    ByVal Vence_Licencia As String,  _
                    ByVal Modocontacto As String,  _
                    ByVal LicenciaConducir As String) As dt_DatosRow
            Dim rowdt_DatosRow As dt_DatosRow = CType(Me.NewRow,dt_DatosRow)
            Dim columnValuesArray() As Object = New Object() {Id_Empleado, Clave, NombreCompleto, Id_Departamento, Departamento, Id_Puesto, Puesto, Id_EstadoCivil, Mail, Status, Sexo, Saldo_Vacaciones, SueldoBase, Calle, NumeroExterior, NumeroInterior, Colonia, Zona, Ciudad, CP, Latitud, Longitud, Telefono, TelefonoMovil, FechaNac, LugarNac, CantHijos, RFC, CURP, IMSS, IFE, TipoLicencia, NumCartilla, Certificacion, ConFamilia, Vicios, Habilidades, ActivDepCult, Idiomas, ViveConFam, CantidadHijos, Edad, FechaIngreso, FechaFin_Labores, APaterno, AMaterno, Nombres, FechaVenceCred, EmpleadoRef, EntreCalle1, EntreCalle2, ModoNacionalidad, PaisNacimiento, FechaNaturalizacion, Pasaporte, JefeArea, UMF, SaleRuta, CreditoInfonavit, VerificaServicios, CiudadNacimiento, EstadoNacimiento, PaisNac, Id_ModoContactoD, Id_ModoContacto, Id_EmpleadoP, CUIP, Mail_Personal, Porte_Armas, FechaActualiza, Numero_Credito, Tipo_Descuento, Monto_Descuento, Vence_Licencia, Modocontacto, LicenciaConducir}
            rowdt_DatosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_DatosRow)
            Return rowdt_DatosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_DatosDataTable = CType(MyBase.Clone,dt_DatosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_DatosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Empleado = MyBase.Columns("Id_Empleado")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombreCompleto = MyBase.Columns("NombreCompleto")
            Me.columnId_Departamento = MyBase.Columns("Id_Departamento")
            Me.columnDepartamento = MyBase.Columns("Departamento")
            Me.columnId_Puesto = MyBase.Columns("Id_Puesto")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnId_EstadoCivil = MyBase.Columns("Id_EstadoCivil")
            Me.columnMail = MyBase.Columns("Mail")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnSexo = MyBase.Columns("Sexo")
            Me.columnSaldo_Vacaciones = MyBase.Columns("Saldo_Vacaciones")
            Me.columnSueldoBase = MyBase.Columns("SueldoBase")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnNumeroExterior = MyBase.Columns("NumeroExterior")
            Me.columnNumeroInterior = MyBase.Columns("NumeroInterior")
            Me.columnColonia = MyBase.Columns("Colonia")
            Me.columnZona = MyBase.Columns("Zona")
            Me.columnCiudad = MyBase.Columns("Ciudad")
            Me.columnCP = MyBase.Columns("CP")
            Me.columnLatitud = MyBase.Columns("Latitud")
            Me.columnLongitud = MyBase.Columns("Longitud")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnTelefonoMovil = MyBase.Columns("TelefonoMovil")
            Me.columnFechaNac = MyBase.Columns("FechaNac")
            Me.columnLugarNac = MyBase.Columns("LugarNac")
            Me.columnCantHijos = MyBase.Columns("CantHijos")
            Me.columnRFC = MyBase.Columns("RFC")
            Me.columnCURP = MyBase.Columns("CURP")
            Me.columnIMSS = MyBase.Columns("IMSS")
            Me.columnIFE = MyBase.Columns("IFE")
            Me.columnTipoLicencia = MyBase.Columns("TipoLicencia")
            Me.columnNumCartilla = MyBase.Columns("NumCartilla")
            Me.columnCertificacion = MyBase.Columns("Certificacion")
            Me.columnConFamilia = MyBase.Columns("ConFamilia")
            Me.columnVicios = MyBase.Columns("Vicios")
            Me.columnHabilidades = MyBase.Columns("Habilidades")
            Me.columnActivDepCult = MyBase.Columns("ActivDepCult")
            Me.columnIdiomas = MyBase.Columns("Idiomas")
            Me.columnViveConFam = MyBase.Columns("ViveConFam")
            Me.columnCantidadHijos = MyBase.Columns("CantidadHijos")
            Me.columnEdad = MyBase.Columns("Edad")
            Me.columnFechaIngreso = MyBase.Columns("FechaIngreso")
            Me.columnFechaFin_Labores = MyBase.Columns("FechaFin_Labores")
            Me.columnAPaterno = MyBase.Columns("APaterno")
            Me.columnAMaterno = MyBase.Columns("AMaterno")
            Me.columnNombres = MyBase.Columns("Nombres")
            Me.columnFechaVenceCred = MyBase.Columns("FechaVenceCred")
            Me.columnEmpleadoRef = MyBase.Columns("EmpleadoRef")
            Me.columnEntreCalle1 = MyBase.Columns("EntreCalle1")
            Me.columnEntreCalle2 = MyBase.Columns("EntreCalle2")
            Me.columnModoNacionalidad = MyBase.Columns("ModoNacionalidad")
            Me.columnPaisNacimiento = MyBase.Columns("PaisNacimiento")
            Me.columnFechaNaturalizacion = MyBase.Columns("FechaNaturalizacion")
            Me.columnPasaporte = MyBase.Columns("Pasaporte")
            Me.columnJefeArea = MyBase.Columns("JefeArea")
            Me.columnUMF = MyBase.Columns("UMF")
            Me.columnSaleRuta = MyBase.Columns("SaleRuta")
            Me.columnCreditoInfonavit = MyBase.Columns("CreditoInfonavit")
            Me.columnVerificaServicios = MyBase.Columns("VerificaServicios")
            Me.columnCiudadNacimiento = MyBase.Columns("CiudadNacimiento")
            Me.columnEstadoNacimiento = MyBase.Columns("EstadoNacimiento")
            Me.columnPaisNac = MyBase.Columns("PaisNac")
            Me.columnId_ModoContactoD = MyBase.Columns("Id_ModoContactoD")
            Me.columnId_ModoContacto = MyBase.Columns("Id_ModoContacto")
            Me.columnId_EmpleadoP = MyBase.Columns("Id_EmpleadoP")
            Me.columnCUIP = MyBase.Columns("CUIP")
            Me.columnMail_Personal = MyBase.Columns("Mail_Personal")
            Me.columnPorte_Armas = MyBase.Columns("Porte_Armas")
            Me.columnFechaActualiza = MyBase.Columns("FechaActualiza")
            Me.columnNumero_Credito = MyBase.Columns("Numero_Credito")
            Me.columnTipo_Descuento = MyBase.Columns("Tipo_Descuento")
            Me.columnMonto_Descuento = MyBase.Columns("Monto_Descuento")
            Me.columnVence_Licencia = MyBase.Columns("Vence_Licencia")
            Me.columnModocontacto = MyBase.Columns("Modocontacto")
            Me.columnLicenciaConducir = MyBase.Columns("LicenciaConducir")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Empleado = New Global.System.Data.DataColumn("Id_Empleado", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Empleado)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombreCompleto = New Global.System.Data.DataColumn("NombreCompleto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCompleto)
            Me.columnId_Departamento = New Global.System.Data.DataColumn("Id_Departamento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Departamento)
            Me.columnDepartamento = New Global.System.Data.DataColumn("Departamento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartamento)
            Me.columnId_Puesto = New Global.System.Data.DataColumn("Id_Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Puesto)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnId_EstadoCivil = New Global.System.Data.DataColumn("Id_EstadoCivil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_EstadoCivil)
            Me.columnMail = New Global.System.Data.DataColumn("Mail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMail)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnSexo = New Global.System.Data.DataColumn("Sexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSexo)
            Me.columnSaldo_Vacaciones = New Global.System.Data.DataColumn("Saldo_Vacaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo_Vacaciones)
            Me.columnSueldoBase = New Global.System.Data.DataColumn("SueldoBase", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSueldoBase)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnNumeroExterior = New Global.System.Data.DataColumn("NumeroExterior", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroExterior)
            Me.columnNumeroInterior = New Global.System.Data.DataColumn("NumeroInterior", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroInterior)
            Me.columnColonia = New Global.System.Data.DataColumn("Colonia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColonia)
            Me.columnZona = New Global.System.Data.DataColumn("Zona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZona)
            Me.columnCiudad = New Global.System.Data.DataColumn("Ciudad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiudad)
            Me.columnCP = New Global.System.Data.DataColumn("CP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCP)
            Me.columnLatitud = New Global.System.Data.DataColumn("Latitud", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLatitud)
            Me.columnLongitud = New Global.System.Data.DataColumn("Longitud", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitud)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnTelefonoMovil = New Global.System.Data.DataColumn("TelefonoMovil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoMovil)
            Me.columnFechaNac = New Global.System.Data.DataColumn("FechaNac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNac)
            Me.columnLugarNac = New Global.System.Data.DataColumn("LugarNac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLugarNac)
            Me.columnCantHijos = New Global.System.Data.DataColumn("CantHijos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantHijos)
            Me.columnRFC = New Global.System.Data.DataColumn("RFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRFC)
            Me.columnCURP = New Global.System.Data.DataColumn("CURP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURP)
            Me.columnIMSS = New Global.System.Data.DataColumn("IMSS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMSS)
            Me.columnIFE = New Global.System.Data.DataColumn("IFE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFE)
            Me.columnTipoLicencia = New Global.System.Data.DataColumn("TipoLicencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoLicencia)
            Me.columnNumCartilla = New Global.System.Data.DataColumn("NumCartilla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumCartilla)
            Me.columnCertificacion = New Global.System.Data.DataColumn("Certificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificacion)
            Me.columnConFamilia = New Global.System.Data.DataColumn("ConFamilia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConFamilia)
            Me.columnVicios = New Global.System.Data.DataColumn("Vicios", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVicios)
            Me.columnHabilidades = New Global.System.Data.DataColumn("Habilidades", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHabilidades)
            Me.columnActivDepCult = New Global.System.Data.DataColumn("ActivDepCult", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActivDepCult)
            Me.columnIdiomas = New Global.System.Data.DataColumn("Idiomas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdiomas)
            Me.columnViveConFam = New Global.System.Data.DataColumn("ViveConFam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViveConFam)
            Me.columnCantidadHijos = New Global.System.Data.DataColumn("CantidadHijos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadHijos)
            Me.columnEdad = New Global.System.Data.DataColumn("Edad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdad)
            Me.columnFechaIngreso = New Global.System.Data.DataColumn("FechaIngreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaIngreso)
            Me.columnFechaFin_Labores = New Global.System.Data.DataColumn("FechaFin_Labores", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFin_Labores)
            Me.columnAPaterno = New Global.System.Data.DataColumn("APaterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPaterno)
            Me.columnAMaterno = New Global.System.Data.DataColumn("AMaterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMaterno)
            Me.columnNombres = New Global.System.Data.DataColumn("Nombres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombres)
            Me.columnFechaVenceCred = New Global.System.Data.DataColumn("FechaVenceCred", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaVenceCred)
            Me.columnEmpleadoRef = New Global.System.Data.DataColumn("EmpleadoRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpleadoRef)
            Me.columnEntreCalle1 = New Global.System.Data.DataColumn("EntreCalle1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntreCalle1)
            Me.columnEntreCalle2 = New Global.System.Data.DataColumn("EntreCalle2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntreCalle2)
            Me.columnModoNacionalidad = New Global.System.Data.DataColumn("ModoNacionalidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModoNacionalidad)
            Me.columnPaisNacimiento = New Global.System.Data.DataColumn("PaisNacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaisNacimiento)
            Me.columnFechaNaturalizacion = New Global.System.Data.DataColumn("FechaNaturalizacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNaturalizacion)
            Me.columnPasaporte = New Global.System.Data.DataColumn("Pasaporte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasaporte)
            Me.columnJefeArea = New Global.System.Data.DataColumn("JefeArea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJefeArea)
            Me.columnUMF = New Global.System.Data.DataColumn("UMF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUMF)
            Me.columnSaleRuta = New Global.System.Data.DataColumn("SaleRuta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaleRuta)
            Me.columnCreditoInfonavit = New Global.System.Data.DataColumn("CreditoInfonavit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditoInfonavit)
            Me.columnVerificaServicios = New Global.System.Data.DataColumn("VerificaServicios", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerificaServicios)
            Me.columnCiudadNacimiento = New Global.System.Data.DataColumn("CiudadNacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiudadNacimiento)
            Me.columnEstadoNacimiento = New Global.System.Data.DataColumn("EstadoNacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoNacimiento)
            Me.columnPaisNac = New Global.System.Data.DataColumn("PaisNac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaisNac)
            Me.columnId_ModoContactoD = New Global.System.Data.DataColumn("Id_ModoContactoD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_ModoContactoD)
            Me.columnId_ModoContacto = New Global.System.Data.DataColumn("Id_ModoContacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_ModoContacto)
            Me.columnId_EmpleadoP = New Global.System.Data.DataColumn("Id_EmpleadoP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_EmpleadoP)
            Me.columnCUIP = New Global.System.Data.DataColumn("CUIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUIP)
            Me.columnMail_Personal = New Global.System.Data.DataColumn("Mail_Personal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMail_Personal)
            Me.columnPorte_Armas = New Global.System.Data.DataColumn("Porte_Armas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorte_Armas)
            Me.columnFechaActualiza = New Global.System.Data.DataColumn("FechaActualiza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaActualiza)
            Me.columnNumero_Credito = New Global.System.Data.DataColumn("Numero_Credito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero_Credito)
            Me.columnTipo_Descuento = New Global.System.Data.DataColumn("Tipo_Descuento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_Descuento)
            Me.columnMonto_Descuento = New Global.System.Data.DataColumn("Monto_Descuento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto_Descuento)
            Me.columnVence_Licencia = New Global.System.Data.DataColumn("Vence_Licencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVence_Licencia)
            Me.columnModocontacto = New Global.System.Data.DataColumn("Modocontacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModocontacto)
            Me.columnLicenciaConducir = New Global.System.Data.DataColumn("LicenciaConducir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLicenciaConducir)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_DatosRow() As dt_DatosRow
            Return CType(Me.NewRow,dt_DatosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_DatosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_DatosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_DatosRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_DatosRowChanged(Me, New dt_DatosRowChangeEvent(CType(e.Row,dt_DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_DatosRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_DatosRowChanging(Me, New dt_DatosRowChangeEvent(CType(e.Row,dt_DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_DatosRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_DatosRowDeleted(Me, New dt_DatosRowChangeEvent(CType(e.Row,dt_DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_DatosRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_DatosRowDeleting(Me, New dt_DatosRowChangeEvent(CType(e.Row,dt_DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_DatosRow(ByVal row As dt_DatosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_DatosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Dt_DatosEDataTable
        Inherits Global.System.Data.TypedTableBase(Of Dt_DatosERow)
        
        Private columnId_GradoEscolar As Global.System.Data.DataColumn
        
        Private columnNombreEscuela As Global.System.Data.DataColumn
        
        Private columnCarrera As Global.System.Data.DataColumn
        
        Private columnEspecialidad As Global.System.Data.DataColumn
        
        Private columnId_TipoDoctoEscolar As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnFechaInicio As Global.System.Data.DataColumn
        
        Private columnFechaFin As Global.System.Data.DataColumn
        
        Private columnPromedio As Global.System.Data.DataColumn
        
        Private columnCedulaProfesional As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dt_DatosE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_GradoEscolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_GradoEscolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEscuelaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEscuela
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CarreraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCarrera
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EspecialidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEspecialidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_TipoDoctoEscolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_TipoDoctoEscolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PromedioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPromedio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaProfesionalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaProfesional
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Dt_DatosERow
            Get
                Return CType(Me.Rows(index),Dt_DatosERow)
            End Get
        End Property
        
        Public Event Dt_DatosERowChanging As Dt_DatosERowChangeEventHandler
        
        Public Event Dt_DatosERowChanged As Dt_DatosERowChangeEventHandler
        
        Public Event Dt_DatosERowDeleting As Dt_DatosERowChangeEventHandler
        
        Public Event Dt_DatosERowDeleted As Dt_DatosERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDt_DatosERow(ByVal row As Dt_DatosERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDt_DatosERow(ByVal Id_GradoEscolar As Integer, ByVal NombreEscuela As String, ByVal Carrera As String, ByVal Especialidad As String, ByVal Id_TipoDoctoEscolar As Long, ByVal Folio As String, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal Promedio As Decimal, ByVal CedulaProfesional As String) As Dt_DatosERow
            Dim rowDt_DatosERow As Dt_DatosERow = CType(Me.NewRow,Dt_DatosERow)
            Dim columnValuesArray() As Object = New Object() {Id_GradoEscolar, NombreEscuela, Carrera, Especialidad, Id_TipoDoctoEscolar, Folio, FechaInicio, FechaFin, Promedio, CedulaProfesional}
            rowDt_DatosERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDt_DatosERow)
            Return rowDt_DatosERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Dt_DatosEDataTable = CType(MyBase.Clone,Dt_DatosEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Dt_DatosEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_GradoEscolar = MyBase.Columns("Id_GradoEscolar")
            Me.columnNombreEscuela = MyBase.Columns("NombreEscuela")
            Me.columnCarrera = MyBase.Columns("Carrera")
            Me.columnEspecialidad = MyBase.Columns("Especialidad")
            Me.columnId_TipoDoctoEscolar = MyBase.Columns("Id_TipoDoctoEscolar")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnFechaInicio = MyBase.Columns("FechaInicio")
            Me.columnFechaFin = MyBase.Columns("FechaFin")
            Me.columnPromedio = MyBase.Columns("Promedio")
            Me.columnCedulaProfesional = MyBase.Columns("CedulaProfesional")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_GradoEscolar = New Global.System.Data.DataColumn("Id_GradoEscolar", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_GradoEscolar)
            Me.columnNombreEscuela = New Global.System.Data.DataColumn("NombreEscuela", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEscuela)
            Me.columnCarrera = New Global.System.Data.DataColumn("Carrera", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCarrera)
            Me.columnEspecialidad = New Global.System.Data.DataColumn("Especialidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEspecialidad)
            Me.columnId_TipoDoctoEscolar = New Global.System.Data.DataColumn("Id_TipoDoctoEscolar", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_TipoDoctoEscolar)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnFechaInicio = New Global.System.Data.DataColumn("FechaInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicio)
            Me.columnFechaFin = New Global.System.Data.DataColumn("FechaFin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFin)
            Me.columnPromedio = New Global.System.Data.DataColumn("Promedio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPromedio)
            Me.columnCedulaProfesional = New Global.System.Data.DataColumn("CedulaProfesional", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaProfesional)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDt_DatosERow() As Dt_DatosERow
            Return CType(Me.NewRow,Dt_DatosERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Dt_DatosERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Dt_DatosERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Dt_DatosERowChangedEvent) Is Nothing) Then
                RaiseEvent Dt_DatosERowChanged(Me, New Dt_DatosERowChangeEvent(CType(e.Row,Dt_DatosERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Dt_DatosERowChangingEvent) Is Nothing) Then
                RaiseEvent Dt_DatosERowChanging(Me, New Dt_DatosERowChangeEvent(CType(e.Row,Dt_DatosERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Dt_DatosERowDeletedEvent) Is Nothing) Then
                RaiseEvent Dt_DatosERowDeleted(Me, New Dt_DatosERowChangeEvent(CType(e.Row,Dt_DatosERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Dt_DatosERowDeletingEvent) Is Nothing) Then
                RaiseEvent Dt_DatosERowDeleting(Me, New Dt_DatosERowChangeEvent(CType(e.Row,Dt_DatosERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDt_DatosERow(ByVal row As Dt_DatosERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Dt_DatosEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Dt_DatosFDataTable
        Inherits Global.System.Data.TypedTableBase(Of Dt_DatosFRow)
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnParentesco As Global.System.Data.DataColumn
        
        Private columnFechaNacimiento As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnCiudad As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnVive As Global.System.Data.DataColumn
        
        Private columnMismoDomicilio As Global.System.Data.DataColumn
        
        Private columnDependiente As Global.System.Data.DataColumn
        
        Private columnId_TipoParentesco As Global.System.Data.DataColumn
        
        Private columnId_Ciudad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dt_DatosF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentescoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentesco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiudadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiudad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MismoDomicilioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMismoDomicilio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DependienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDependiente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_TipoParentescoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_TipoParentesco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_CiudadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Ciudad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Dt_DatosFRow
            Get
                Return CType(Me.Rows(index),Dt_DatosFRow)
            End Get
        End Property
        
        Public Event Dt_DatosFRowChanging As Dt_DatosFRowChangeEventHandler
        
        Public Event Dt_DatosFRowChanged As Dt_DatosFRowChangeEventHandler
        
        Public Event Dt_DatosFRowDeleting As Dt_DatosFRowChangeEventHandler
        
        Public Event Dt_DatosFRowDeleted As Dt_DatosFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDt_DatosFRow(ByVal row As Dt_DatosFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDt_DatosFRow(ByVal Nombre As String, ByVal Parentesco As String, ByVal FechaNacimiento As String, ByVal Direccion As String, ByVal Ciudad As String, ByVal Telefono As String, ByVal Vive As String, ByVal MismoDomicilio As String, ByVal Dependiente As String, ByVal Id_TipoParentesco As String, ByVal Id_Ciudad As String) As Dt_DatosFRow
            Dim rowDt_DatosFRow As Dt_DatosFRow = CType(Me.NewRow,Dt_DatosFRow)
            Dim columnValuesArray() As Object = New Object() {Nombre, Parentesco, FechaNacimiento, Direccion, Ciudad, Telefono, Vive, MismoDomicilio, Dependiente, Id_TipoParentesco, Id_Ciudad}
            rowDt_DatosFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDt_DatosFRow)
            Return rowDt_DatosFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Dt_DatosFDataTable = CType(MyBase.Clone,Dt_DatosFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Dt_DatosFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnParentesco = MyBase.Columns("Parentesco")
            Me.columnFechaNacimiento = MyBase.Columns("FechaNacimiento")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnCiudad = MyBase.Columns("Ciudad")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnVive = MyBase.Columns("Vive")
            Me.columnMismoDomicilio = MyBase.Columns("MismoDomicilio")
            Me.columnDependiente = MyBase.Columns("Dependiente")
            Me.columnId_TipoParentesco = MyBase.Columns("Id_TipoParentesco")
            Me.columnId_Ciudad = MyBase.Columns("Id_Ciudad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnParentesco = New Global.System.Data.DataColumn("Parentesco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentesco)
            Me.columnFechaNacimiento = New Global.System.Data.DataColumn("FechaNacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNacimiento)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnCiudad = New Global.System.Data.DataColumn("Ciudad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiudad)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnVive = New Global.System.Data.DataColumn("Vive", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVive)
            Me.columnMismoDomicilio = New Global.System.Data.DataColumn("MismoDomicilio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMismoDomicilio)
            Me.columnDependiente = New Global.System.Data.DataColumn("Dependiente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDependiente)
            Me.columnId_TipoParentesco = New Global.System.Data.DataColumn("Id_TipoParentesco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_TipoParentesco)
            Me.columnId_Ciudad = New Global.System.Data.DataColumn("Id_Ciudad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Ciudad)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDt_DatosFRow() As Dt_DatosFRow
            Return CType(Me.NewRow,Dt_DatosFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Dt_DatosFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Dt_DatosFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Dt_DatosFRowChangedEvent) Is Nothing) Then
                RaiseEvent Dt_DatosFRowChanged(Me, New Dt_DatosFRowChangeEvent(CType(e.Row,Dt_DatosFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Dt_DatosFRowChangingEvent) Is Nothing) Then
                RaiseEvent Dt_DatosFRowChanging(Me, New Dt_DatosFRowChangeEvent(CType(e.Row,Dt_DatosFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Dt_DatosFRowDeletedEvent) Is Nothing) Then
                RaiseEvent Dt_DatosFRowDeleted(Me, New Dt_DatosFRowChangeEvent(CType(e.Row,Dt_DatosFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Dt_DatosFRowDeletingEvent) Is Nothing) Then
                RaiseEvent Dt_DatosFRowDeleting(Me, New Dt_DatosFRowChangeEvent(CType(e.Row,Dt_DatosFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDt_DatosFRow(ByVal row As Dt_DatosFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Dt_DatosFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Dt_PadreDataTable
        Inherits Global.System.Data.TypedTableBase(Of Dt_PadreRow)
        
        Private columnId_EmpleadoFamiliares As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnFechaNacimiento As Global.System.Data.DataColumn
        
        Private columnVive As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dt_Padre"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoFamiliaresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_EmpleadoFamiliares
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Dt_PadreRow
            Get
                Return CType(Me.Rows(index),Dt_PadreRow)
            End Get
        End Property
        
        Public Event Dt_PadreRowChanging As Dt_PadreRowChangeEventHandler
        
        Public Event Dt_PadreRowChanged As Dt_PadreRowChangeEventHandler
        
        Public Event Dt_PadreRowDeleting As Dt_PadreRowChangeEventHandler
        
        Public Event Dt_PadreRowDeleted As Dt_PadreRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDt_PadreRow(ByVal row As Dt_PadreRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDt_PadreRow(ByVal Id_EmpleadoFamiliares As String, ByVal Nombre As String, ByVal FechaNacimiento As String, ByVal Vive As String) As Dt_PadreRow
            Dim rowDt_PadreRow As Dt_PadreRow = CType(Me.NewRow,Dt_PadreRow)
            Dim columnValuesArray() As Object = New Object() {Id_EmpleadoFamiliares, Nombre, FechaNacimiento, Vive}
            rowDt_PadreRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDt_PadreRow)
            Return rowDt_PadreRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Dt_PadreDataTable = CType(MyBase.Clone,Dt_PadreDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Dt_PadreDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_EmpleadoFamiliares = MyBase.Columns("Id_EmpleadoFamiliares")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnFechaNacimiento = MyBase.Columns("FechaNacimiento")
            Me.columnVive = MyBase.Columns("Vive")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_EmpleadoFamiliares = New Global.System.Data.DataColumn("Id_EmpleadoFamiliares", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_EmpleadoFamiliares)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnFechaNacimiento = New Global.System.Data.DataColumn("FechaNacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNacimiento)
            Me.columnVive = New Global.System.Data.DataColumn("Vive", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVive)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDt_PadreRow() As Dt_PadreRow
            Return CType(Me.NewRow,Dt_PadreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Dt_PadreRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Dt_PadreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Dt_PadreRowChangedEvent) Is Nothing) Then
                RaiseEvent Dt_PadreRowChanged(Me, New Dt_PadreRowChangeEvent(CType(e.Row,Dt_PadreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Dt_PadreRowChangingEvent) Is Nothing) Then
                RaiseEvent Dt_PadreRowChanging(Me, New Dt_PadreRowChangeEvent(CType(e.Row,Dt_PadreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Dt_PadreRowDeletedEvent) Is Nothing) Then
                RaiseEvent Dt_PadreRowDeleted(Me, New Dt_PadreRowChangeEvent(CType(e.Row,Dt_PadreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Dt_PadreRowDeletingEvent) Is Nothing) Then
                RaiseEvent Dt_PadreRowDeleting(Me, New Dt_PadreRowChangeEvent(CType(e.Row,Dt_PadreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDt_PadreRow(ByVal row As Dt_PadreRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Dt_PadreDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Dt_MadreDataTable
        Inherits Global.System.Data.TypedTableBase(Of Dt_MadreRow)
        
        Private columnId_EmpleadoFamiliares As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnFechaNacimiento As Global.System.Data.DataColumn
        
        Private columnVive As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dt_Madre"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoFamiliaresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_EmpleadoFamiliares
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Dt_MadreRow
            Get
                Return CType(Me.Rows(index),Dt_MadreRow)
            End Get
        End Property
        
        Public Event Dt_MadreRowChanging As Dt_MadreRowChangeEventHandler
        
        Public Event Dt_MadreRowChanged As Dt_MadreRowChangeEventHandler
        
        Public Event Dt_MadreRowDeleting As Dt_MadreRowChangeEventHandler
        
        Public Event Dt_MadreRowDeleted As Dt_MadreRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDt_MadreRow(ByVal row As Dt_MadreRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDt_MadreRow(ByVal Id_EmpleadoFamiliares As String, ByVal Nombre As String, ByVal FechaNacimiento As String, ByVal Vive As String) As Dt_MadreRow
            Dim rowDt_MadreRow As Dt_MadreRow = CType(Me.NewRow,Dt_MadreRow)
            Dim columnValuesArray() As Object = New Object() {Id_EmpleadoFamiliares, Nombre, FechaNacimiento, Vive}
            rowDt_MadreRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDt_MadreRow)
            Return rowDt_MadreRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Dt_MadreDataTable = CType(MyBase.Clone,Dt_MadreDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Dt_MadreDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_EmpleadoFamiliares = MyBase.Columns("Id_EmpleadoFamiliares")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnFechaNacimiento = MyBase.Columns("FechaNacimiento")
            Me.columnVive = MyBase.Columns("Vive")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_EmpleadoFamiliares = New Global.System.Data.DataColumn("Id_EmpleadoFamiliares", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_EmpleadoFamiliares)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnFechaNacimiento = New Global.System.Data.DataColumn("FechaNacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNacimiento)
            Me.columnVive = New Global.System.Data.DataColumn("Vive", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVive)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDt_MadreRow() As Dt_MadreRow
            Return CType(Me.NewRow,Dt_MadreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Dt_MadreRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Dt_MadreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Dt_MadreRowChangedEvent) Is Nothing) Then
                RaiseEvent Dt_MadreRowChanged(Me, New Dt_MadreRowChangeEvent(CType(e.Row,Dt_MadreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Dt_MadreRowChangingEvent) Is Nothing) Then
                RaiseEvent Dt_MadreRowChanging(Me, New Dt_MadreRowChangeEvent(CType(e.Row,Dt_MadreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Dt_MadreRowDeletedEvent) Is Nothing) Then
                RaiseEvent Dt_MadreRowDeleted(Me, New Dt_MadreRowChangeEvent(CType(e.Row,Dt_MadreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Dt_MadreRowDeletingEvent) Is Nothing) Then
                RaiseEvent Dt_MadreRowDeleting(Me, New Dt_MadreRowChangeEvent(CType(e.Row,Dt_MadreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDt_MadreRow(ByVal row As Dt_MadreRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Dt_MadreDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Dt_HermanosDataTable
        Inherits Global.System.Data.TypedTableBase(Of Dt_HermanosRow)
        
        Private columnId_EmpleadoFamiliares As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dt_Hermanos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoFamiliaresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_EmpleadoFamiliares
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Dt_HermanosRow
            Get
                Return CType(Me.Rows(index),Dt_HermanosRow)
            End Get
        End Property
        
        Public Event Dt_HermanosRowChanging As Dt_HermanosRowChangeEventHandler
        
        Public Event Dt_HermanosRowChanged As Dt_HermanosRowChangeEventHandler
        
        Public Event Dt_HermanosRowDeleting As Dt_HermanosRowChangeEventHandler
        
        Public Event Dt_HermanosRowDeleted As Dt_HermanosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDt_HermanosRow(ByVal row As Dt_HermanosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDt_HermanosRow(ByVal Id_EmpleadoFamiliares As String, ByVal Nombre As String) As Dt_HermanosRow
            Dim rowDt_HermanosRow As Dt_HermanosRow = CType(Me.NewRow,Dt_HermanosRow)
            Dim columnValuesArray() As Object = New Object() {Id_EmpleadoFamiliares, Nombre}
            rowDt_HermanosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDt_HermanosRow)
            Return rowDt_HermanosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Dt_HermanosDataTable = CType(MyBase.Clone,Dt_HermanosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Dt_HermanosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_EmpleadoFamiliares = MyBase.Columns("Id_EmpleadoFamiliares")
            Me.columnNombre = MyBase.Columns("Nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_EmpleadoFamiliares = New Global.System.Data.DataColumn("Id_EmpleadoFamiliares", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_EmpleadoFamiliares)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDt_HermanosRow() As Dt_HermanosRow
            Return CType(Me.NewRow,Dt_HermanosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Dt_HermanosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Dt_HermanosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Dt_HermanosRowChangedEvent) Is Nothing) Then
                RaiseEvent Dt_HermanosRowChanged(Me, New Dt_HermanosRowChangeEvent(CType(e.Row,Dt_HermanosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Dt_HermanosRowChangingEvent) Is Nothing) Then
                RaiseEvent Dt_HermanosRowChanging(Me, New Dt_HermanosRowChangeEvent(CType(e.Row,Dt_HermanosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Dt_HermanosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Dt_HermanosRowDeleted(Me, New Dt_HermanosRowChangeEvent(CType(e.Row,Dt_HermanosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Dt_HermanosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Dt_HermanosRowDeleting(Me, New Dt_HermanosRowChangeEvent(CType(e.Row,Dt_HermanosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDt_HermanosRow(ByVal row As Dt_HermanosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Dt_HermanosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Dt_RasgosDataTable
        Inherits Global.System.Data.TypedTableBase(Of Dt_RasgosRow)
        
        Private columnId_Empleado As Global.System.Data.DataColumn
        
        Private columnPeso As Global.System.Data.DataColumn
        
        Private columnEstatura As Global.System.Data.DataColumn
        
        Private columnTsangre As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columncomplexion As Global.System.Data.DataColumn
        
        Private columnccabello As Global.System.Data.DataColumn
        
        Private columncpiel As Global.System.Data.DataColumn
        
        Private columncojos As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dt_Rasgos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstaturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstatura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TsangreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTsangre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property complexionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomplexion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ccabelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnccabello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cpielColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncpiel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cojosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncojos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Dt_RasgosRow
            Get
                Return CType(Me.Rows(index),Dt_RasgosRow)
            End Get
        End Property
        
        Public Event Dt_RasgosRowChanging As Dt_RasgosRowChangeEventHandler
        
        Public Event Dt_RasgosRowChanged As Dt_RasgosRowChangeEventHandler
        
        Public Event Dt_RasgosRowDeleting As Dt_RasgosRowChangeEventHandler
        
        Public Event Dt_RasgosRowDeleted As Dt_RasgosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDt_RasgosRow(ByVal row As Dt_RasgosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDt_RasgosRow(ByVal Id_Empleado As String, ByVal Peso As String, ByVal Estatura As String, ByVal Tsangre As String, ByVal Tipo As String, ByVal complexion As String, ByVal ccabello As String, ByVal cpiel As String, ByVal cojos As String) As Dt_RasgosRow
            Dim rowDt_RasgosRow As Dt_RasgosRow = CType(Me.NewRow,Dt_RasgosRow)
            Dim columnValuesArray() As Object = New Object() {Id_Empleado, Peso, Estatura, Tsangre, Tipo, complexion, ccabello, cpiel, cojos}
            rowDt_RasgosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDt_RasgosRow)
            Return rowDt_RasgosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Dt_RasgosDataTable = CType(MyBase.Clone,Dt_RasgosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Dt_RasgosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Empleado = MyBase.Columns("Id_Empleado")
            Me.columnPeso = MyBase.Columns("Peso")
            Me.columnEstatura = MyBase.Columns("Estatura")
            Me.columnTsangre = MyBase.Columns("Tsangre")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columncomplexion = MyBase.Columns("complexion")
            Me.columnccabello = MyBase.Columns("ccabello")
            Me.columncpiel = MyBase.Columns("cpiel")
            Me.columncojos = MyBase.Columns("cojos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Empleado = New Global.System.Data.DataColumn("Id_Empleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Empleado)
            Me.columnPeso = New Global.System.Data.DataColumn("Peso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeso)
            Me.columnEstatura = New Global.System.Data.DataColumn("Estatura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstatura)
            Me.columnTsangre = New Global.System.Data.DataColumn("Tsangre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTsangre)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columncomplexion = New Global.System.Data.DataColumn("complexion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomplexion)
            Me.columnccabello = New Global.System.Data.DataColumn("ccabello", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnccabello)
            Me.columncpiel = New Global.System.Data.DataColumn("cpiel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpiel)
            Me.columncojos = New Global.System.Data.DataColumn("cojos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncojos)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDt_RasgosRow() As Dt_RasgosRow
            Return CType(Me.NewRow,Dt_RasgosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Dt_RasgosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Dt_RasgosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Dt_RasgosRowChangedEvent) Is Nothing) Then
                RaiseEvent Dt_RasgosRowChanged(Me, New Dt_RasgosRowChangeEvent(CType(e.Row,Dt_RasgosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Dt_RasgosRowChangingEvent) Is Nothing) Then
                RaiseEvent Dt_RasgosRowChanging(Me, New Dt_RasgosRowChangeEvent(CType(e.Row,Dt_RasgosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Dt_RasgosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Dt_RasgosRowDeleted(Me, New Dt_RasgosRowChangeEvent(CType(e.Row,Dt_RasgosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Dt_RasgosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Dt_RasgosRowDeleting(Me, New Dt_RasgosRowChangeEvent(CType(e.Row,Dt_RasgosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDt_RasgosRow(ByVal row As Dt_RasgosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Dt_RasgosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_EmpleoAnt1DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_EmpleoAnt1Row)
        
        Private columnNombreEmpresa As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnMotivoBaja As Global.System.Data.DataColumn
        
        Private columnDomicilio As Global.System.Data.DataColumn
        
        Private columnPuestoJefe As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnSueldoFin As Global.System.Data.DataColumn
        
        Private columnEmpresaSeg As Global.System.Data.DataColumn
        
        Private columnFechaIngreso As Global.System.Data.DataColumn
        
        Private columnFechaBaja As Global.System.Data.DataColumn
        
        Private columnNombreJefe As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_EmpleoAnt1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoBajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivoBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomicilioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoJefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuestoJefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SueldoFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSueldoFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpresaSegColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpresaSeg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaIngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaBajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreJefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreJefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_EmpleoAnt1Row
            Get
                Return CType(Me.Rows(index),dt_EmpleoAnt1Row)
            End Get
        End Property
        
        Public Event dt_EmpleoAnt1RowChanging As dt_EmpleoAnt1RowChangeEventHandler
        
        Public Event dt_EmpleoAnt1RowChanged As dt_EmpleoAnt1RowChangeEventHandler
        
        Public Event dt_EmpleoAnt1RowDeleting As dt_EmpleoAnt1RowChangeEventHandler
        
        Public Event dt_EmpleoAnt1RowDeleted As dt_EmpleoAnt1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_EmpleoAnt1Row(ByVal row As dt_EmpleoAnt1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_EmpleoAnt1Row(ByVal NombreEmpresa As String, ByVal Puesto As String, ByVal MotivoBaja As String, ByVal Domicilio As String, ByVal PuestoJefe As String, ByVal Telefono As String, ByVal SueldoFin As Double, ByVal EmpresaSeg As String, ByVal FechaIngreso As String, ByVal FechaBaja As String, ByVal NombreJefe As String) As dt_EmpleoAnt1Row
            Dim rowdt_EmpleoAnt1Row As dt_EmpleoAnt1Row = CType(Me.NewRow,dt_EmpleoAnt1Row)
            Dim columnValuesArray() As Object = New Object() {NombreEmpresa, Puesto, MotivoBaja, Domicilio, PuestoJefe, Telefono, SueldoFin, EmpresaSeg, FechaIngreso, FechaBaja, NombreJefe}
            rowdt_EmpleoAnt1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_EmpleoAnt1Row)
            Return rowdt_EmpleoAnt1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_EmpleoAnt1DataTable = CType(MyBase.Clone,dt_EmpleoAnt1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_EmpleoAnt1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombreEmpresa = MyBase.Columns("NombreEmpresa")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnMotivoBaja = MyBase.Columns("MotivoBaja")
            Me.columnDomicilio = MyBase.Columns("Domicilio")
            Me.columnPuestoJefe = MyBase.Columns("PuestoJefe")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnSueldoFin = MyBase.Columns("SueldoFin")
            Me.columnEmpresaSeg = MyBase.Columns("EmpresaSeg")
            Me.columnFechaIngreso = MyBase.Columns("FechaIngreso")
            Me.columnFechaBaja = MyBase.Columns("FechaBaja")
            Me.columnNombreJefe = MyBase.Columns("NombreJefe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombreEmpresa = New Global.System.Data.DataColumn("NombreEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresa)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnMotivoBaja = New Global.System.Data.DataColumn("MotivoBaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivoBaja)
            Me.columnDomicilio = New Global.System.Data.DataColumn("Domicilio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio)
            Me.columnPuestoJefe = New Global.System.Data.DataColumn("PuestoJefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuestoJefe)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnSueldoFin = New Global.System.Data.DataColumn("SueldoFin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSueldoFin)
            Me.columnEmpresaSeg = New Global.System.Data.DataColumn("EmpresaSeg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpresaSeg)
            Me.columnFechaIngreso = New Global.System.Data.DataColumn("FechaIngreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaIngreso)
            Me.columnFechaBaja = New Global.System.Data.DataColumn("FechaBaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaBaja)
            Me.columnNombreJefe = New Global.System.Data.DataColumn("NombreJefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreJefe)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_EmpleoAnt1Row() As dt_EmpleoAnt1Row
            Return CType(Me.NewRow,dt_EmpleoAnt1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_EmpleoAnt1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_EmpleoAnt1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_EmpleoAnt1RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt1RowChanged(Me, New dt_EmpleoAnt1RowChangeEvent(CType(e.Row,dt_EmpleoAnt1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_EmpleoAnt1RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt1RowChanging(Me, New dt_EmpleoAnt1RowChangeEvent(CType(e.Row,dt_EmpleoAnt1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_EmpleoAnt1RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt1RowDeleted(Me, New dt_EmpleoAnt1RowChangeEvent(CType(e.Row,dt_EmpleoAnt1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_EmpleoAnt1RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt1RowDeleting(Me, New dt_EmpleoAnt1RowChangeEvent(CType(e.Row,dt_EmpleoAnt1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_EmpleoAnt1Row(ByVal row As dt_EmpleoAnt1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_EmpleoAnt1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_EmpleoAnt2DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_EmpleoAnt2Row)
        
        Private columnNombreEmpresa As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnMotivoBaja As Global.System.Data.DataColumn
        
        Private columnDomicilio As Global.System.Data.DataColumn
        
        Private columnPuestoJefe As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnSueldoFin As Global.System.Data.DataColumn
        
        Private columnEmpresaSeg As Global.System.Data.DataColumn
        
        Private columnFechaIngreso As Global.System.Data.DataColumn
        
        Private columnFechaBaja As Global.System.Data.DataColumn
        
        Private columnNombreJefe As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_EmpleoAnt2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoBajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivoBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomicilioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoJefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuestoJefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SueldoFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSueldoFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpresaSegColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpresaSeg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaIngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaBajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreJefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreJefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_EmpleoAnt2Row
            Get
                Return CType(Me.Rows(index),dt_EmpleoAnt2Row)
            End Get
        End Property
        
        Public Event dt_EmpleoAnt2RowChanging As dt_EmpleoAnt2RowChangeEventHandler
        
        Public Event dt_EmpleoAnt2RowChanged As dt_EmpleoAnt2RowChangeEventHandler
        
        Public Event dt_EmpleoAnt2RowDeleting As dt_EmpleoAnt2RowChangeEventHandler
        
        Public Event dt_EmpleoAnt2RowDeleted As dt_EmpleoAnt2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_EmpleoAnt2Row(ByVal row As dt_EmpleoAnt2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_EmpleoAnt2Row(ByVal NombreEmpresa As String, ByVal Puesto As String, ByVal MotivoBaja As String, ByVal Domicilio As String, ByVal PuestoJefe As String, ByVal Telefono As String, ByVal SueldoFin As Double, ByVal EmpresaSeg As String, ByVal FechaIngreso As String, ByVal FechaBaja As String, ByVal NombreJefe As String) As dt_EmpleoAnt2Row
            Dim rowdt_EmpleoAnt2Row As dt_EmpleoAnt2Row = CType(Me.NewRow,dt_EmpleoAnt2Row)
            Dim columnValuesArray() As Object = New Object() {NombreEmpresa, Puesto, MotivoBaja, Domicilio, PuestoJefe, Telefono, SueldoFin, EmpresaSeg, FechaIngreso, FechaBaja, NombreJefe}
            rowdt_EmpleoAnt2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_EmpleoAnt2Row)
            Return rowdt_EmpleoAnt2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_EmpleoAnt2DataTable = CType(MyBase.Clone,dt_EmpleoAnt2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_EmpleoAnt2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombreEmpresa = MyBase.Columns("NombreEmpresa")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnMotivoBaja = MyBase.Columns("MotivoBaja")
            Me.columnDomicilio = MyBase.Columns("Domicilio")
            Me.columnPuestoJefe = MyBase.Columns("PuestoJefe")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnSueldoFin = MyBase.Columns("SueldoFin")
            Me.columnEmpresaSeg = MyBase.Columns("EmpresaSeg")
            Me.columnFechaIngreso = MyBase.Columns("FechaIngreso")
            Me.columnFechaBaja = MyBase.Columns("FechaBaja")
            Me.columnNombreJefe = MyBase.Columns("NombreJefe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombreEmpresa = New Global.System.Data.DataColumn("NombreEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresa)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnMotivoBaja = New Global.System.Data.DataColumn("MotivoBaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivoBaja)
            Me.columnDomicilio = New Global.System.Data.DataColumn("Domicilio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio)
            Me.columnPuestoJefe = New Global.System.Data.DataColumn("PuestoJefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuestoJefe)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnSueldoFin = New Global.System.Data.DataColumn("SueldoFin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSueldoFin)
            Me.columnEmpresaSeg = New Global.System.Data.DataColumn("EmpresaSeg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpresaSeg)
            Me.columnFechaIngreso = New Global.System.Data.DataColumn("FechaIngreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaIngreso)
            Me.columnFechaBaja = New Global.System.Data.DataColumn("FechaBaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaBaja)
            Me.columnNombreJefe = New Global.System.Data.DataColumn("NombreJefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreJefe)
            Me.columnMotivoBaja.Caption = "MotivoSeparacion"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_EmpleoAnt2Row() As dt_EmpleoAnt2Row
            Return CType(Me.NewRow,dt_EmpleoAnt2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_EmpleoAnt2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_EmpleoAnt2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_EmpleoAnt2RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt2RowChanged(Me, New dt_EmpleoAnt2RowChangeEvent(CType(e.Row,dt_EmpleoAnt2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_EmpleoAnt2RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt2RowChanging(Me, New dt_EmpleoAnt2RowChangeEvent(CType(e.Row,dt_EmpleoAnt2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_EmpleoAnt2RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt2RowDeleted(Me, New dt_EmpleoAnt2RowChangeEvent(CType(e.Row,dt_EmpleoAnt2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_EmpleoAnt2RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt2RowDeleting(Me, New dt_EmpleoAnt2RowChangeEvent(CType(e.Row,dt_EmpleoAnt2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_EmpleoAnt2Row(ByVal row As dt_EmpleoAnt2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_EmpleoAnt2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_EmpleoAnt3DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_EmpleoAnt3Row)
        
        Private columnNombreEmpresa As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnMotivoBaja As Global.System.Data.DataColumn
        
        Private columnDomicilio As Global.System.Data.DataColumn
        
        Private columnPuestoJefe As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnSueldoFin As Global.System.Data.DataColumn
        
        Private columnEmpresaSeg As Global.System.Data.DataColumn
        
        Private columnFechaIngreso As Global.System.Data.DataColumn
        
        Private columnFechaBaja As Global.System.Data.DataColumn
        
        Private columnNombreJefe As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_EmpleoAnt3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoBajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivoBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomicilioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoJefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuestoJefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SueldoFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSueldoFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpresaSegColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpresaSeg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaIngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaBajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreJefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreJefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_EmpleoAnt3Row
            Get
                Return CType(Me.Rows(index),dt_EmpleoAnt3Row)
            End Get
        End Property
        
        Public Event dt_EmpleoAnt3RowChanging As dt_EmpleoAnt3RowChangeEventHandler
        
        Public Event dt_EmpleoAnt3RowChanged As dt_EmpleoAnt3RowChangeEventHandler
        
        Public Event dt_EmpleoAnt3RowDeleting As dt_EmpleoAnt3RowChangeEventHandler
        
        Public Event dt_EmpleoAnt3RowDeleted As dt_EmpleoAnt3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_EmpleoAnt3Row(ByVal row As dt_EmpleoAnt3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_EmpleoAnt3Row(ByVal NombreEmpresa As String, ByVal Puesto As String, ByVal MotivoBaja As String, ByVal Domicilio As String, ByVal PuestoJefe As String, ByVal Telefono As String, ByVal SueldoFin As Double, ByVal EmpresaSeg As String, ByVal FechaIngreso As String, ByVal FechaBaja As String, ByVal NombreJefe As String) As dt_EmpleoAnt3Row
            Dim rowdt_EmpleoAnt3Row As dt_EmpleoAnt3Row = CType(Me.NewRow,dt_EmpleoAnt3Row)
            Dim columnValuesArray() As Object = New Object() {NombreEmpresa, Puesto, MotivoBaja, Domicilio, PuestoJefe, Telefono, SueldoFin, EmpresaSeg, FechaIngreso, FechaBaja, NombreJefe}
            rowdt_EmpleoAnt3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_EmpleoAnt3Row)
            Return rowdt_EmpleoAnt3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_EmpleoAnt3DataTable = CType(MyBase.Clone,dt_EmpleoAnt3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_EmpleoAnt3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombreEmpresa = MyBase.Columns("NombreEmpresa")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnMotivoBaja = MyBase.Columns("MotivoBaja")
            Me.columnDomicilio = MyBase.Columns("Domicilio")
            Me.columnPuestoJefe = MyBase.Columns("PuestoJefe")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnSueldoFin = MyBase.Columns("SueldoFin")
            Me.columnEmpresaSeg = MyBase.Columns("EmpresaSeg")
            Me.columnFechaIngreso = MyBase.Columns("FechaIngreso")
            Me.columnFechaBaja = MyBase.Columns("FechaBaja")
            Me.columnNombreJefe = MyBase.Columns("NombreJefe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombreEmpresa = New Global.System.Data.DataColumn("NombreEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresa)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnMotivoBaja = New Global.System.Data.DataColumn("MotivoBaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivoBaja)
            Me.columnDomicilio = New Global.System.Data.DataColumn("Domicilio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio)
            Me.columnPuestoJefe = New Global.System.Data.DataColumn("PuestoJefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuestoJefe)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnSueldoFin = New Global.System.Data.DataColumn("SueldoFin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSueldoFin)
            Me.columnEmpresaSeg = New Global.System.Data.DataColumn("EmpresaSeg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpresaSeg)
            Me.columnFechaIngreso = New Global.System.Data.DataColumn("FechaIngreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaIngreso)
            Me.columnFechaBaja = New Global.System.Data.DataColumn("FechaBaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaBaja)
            Me.columnNombreJefe = New Global.System.Data.DataColumn("NombreJefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreJefe)
            Me.columnMotivoBaja.Caption = "MotivoSeparacion"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_EmpleoAnt3Row() As dt_EmpleoAnt3Row
            Return CType(Me.NewRow,dt_EmpleoAnt3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_EmpleoAnt3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_EmpleoAnt3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_EmpleoAnt3RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt3RowChanged(Me, New dt_EmpleoAnt3RowChangeEvent(CType(e.Row,dt_EmpleoAnt3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_EmpleoAnt3RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt3RowChanging(Me, New dt_EmpleoAnt3RowChangeEvent(CType(e.Row,dt_EmpleoAnt3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_EmpleoAnt3RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt3RowDeleted(Me, New dt_EmpleoAnt3RowChangeEvent(CType(e.Row,dt_EmpleoAnt3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_EmpleoAnt3RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt3RowDeleting(Me, New dt_EmpleoAnt3RowChangeEvent(CType(e.Row,dt_EmpleoAnt3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_EmpleoAnt3Row(ByVal row As dt_EmpleoAnt3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_EmpleoAnt3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_EmpleoAnt4DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_EmpleoAnt4Row)
        
        Private columnNombreEmpresa As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnMotivoBaja As Global.System.Data.DataColumn
        
        Private columnDomicilio As Global.System.Data.DataColumn
        
        Private columnPuestoJefe As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnSueldoFin As Global.System.Data.DataColumn
        
        Private columnEmpresaSeg As Global.System.Data.DataColumn
        
        Private columnFechaIngreso As Global.System.Data.DataColumn
        
        Private columnFechaBaja As Global.System.Data.DataColumn
        
        Private columnNombreJefe As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_EmpleoAnt4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoBajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivoBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomicilioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoJefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuestoJefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SueldoFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSueldoFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpresaSegColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpresaSeg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaIngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaBajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreJefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreJefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_EmpleoAnt4Row
            Get
                Return CType(Me.Rows(index),dt_EmpleoAnt4Row)
            End Get
        End Property
        
        Public Event dt_EmpleoAnt4RowChanging As dt_EmpleoAnt4RowChangeEventHandler
        
        Public Event dt_EmpleoAnt4RowChanged As dt_EmpleoAnt4RowChangeEventHandler
        
        Public Event dt_EmpleoAnt4RowDeleting As dt_EmpleoAnt4RowChangeEventHandler
        
        Public Event dt_EmpleoAnt4RowDeleted As dt_EmpleoAnt4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_EmpleoAnt4Row(ByVal row As dt_EmpleoAnt4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_EmpleoAnt4Row(ByVal NombreEmpresa As String, ByVal Puesto As String, ByVal MotivoBaja As String, ByVal Domicilio As String, ByVal PuestoJefe As String, ByVal Telefono As String, ByVal SueldoFin As Double, ByVal EmpresaSeg As String, ByVal FechaIngreso As String, ByVal FechaBaja As String, ByVal NombreJefe As String) As dt_EmpleoAnt4Row
            Dim rowdt_EmpleoAnt4Row As dt_EmpleoAnt4Row = CType(Me.NewRow,dt_EmpleoAnt4Row)
            Dim columnValuesArray() As Object = New Object() {NombreEmpresa, Puesto, MotivoBaja, Domicilio, PuestoJefe, Telefono, SueldoFin, EmpresaSeg, FechaIngreso, FechaBaja, NombreJefe}
            rowdt_EmpleoAnt4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_EmpleoAnt4Row)
            Return rowdt_EmpleoAnt4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_EmpleoAnt4DataTable = CType(MyBase.Clone,dt_EmpleoAnt4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_EmpleoAnt4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombreEmpresa = MyBase.Columns("NombreEmpresa")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnMotivoBaja = MyBase.Columns("MotivoBaja")
            Me.columnDomicilio = MyBase.Columns("Domicilio")
            Me.columnPuestoJefe = MyBase.Columns("PuestoJefe")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnSueldoFin = MyBase.Columns("SueldoFin")
            Me.columnEmpresaSeg = MyBase.Columns("EmpresaSeg")
            Me.columnFechaIngreso = MyBase.Columns("FechaIngreso")
            Me.columnFechaBaja = MyBase.Columns("FechaBaja")
            Me.columnNombreJefe = MyBase.Columns("NombreJefe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombreEmpresa = New Global.System.Data.DataColumn("NombreEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresa)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnMotivoBaja = New Global.System.Data.DataColumn("MotivoBaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivoBaja)
            Me.columnDomicilio = New Global.System.Data.DataColumn("Domicilio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio)
            Me.columnPuestoJefe = New Global.System.Data.DataColumn("PuestoJefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuestoJefe)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnSueldoFin = New Global.System.Data.DataColumn("SueldoFin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSueldoFin)
            Me.columnEmpresaSeg = New Global.System.Data.DataColumn("EmpresaSeg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpresaSeg)
            Me.columnFechaIngreso = New Global.System.Data.DataColumn("FechaIngreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaIngreso)
            Me.columnFechaBaja = New Global.System.Data.DataColumn("FechaBaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaBaja)
            Me.columnNombreJefe = New Global.System.Data.DataColumn("NombreJefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreJefe)
            Me.columnMotivoBaja.Caption = "MotivoSeparacion"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_EmpleoAnt4Row() As dt_EmpleoAnt4Row
            Return CType(Me.NewRow,dt_EmpleoAnt4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_EmpleoAnt4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_EmpleoAnt4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_EmpleoAnt4RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt4RowChanged(Me, New dt_EmpleoAnt4RowChangeEvent(CType(e.Row,dt_EmpleoAnt4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_EmpleoAnt4RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt4RowChanging(Me, New dt_EmpleoAnt4RowChangeEvent(CType(e.Row,dt_EmpleoAnt4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_EmpleoAnt4RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt4RowDeleted(Me, New dt_EmpleoAnt4RowChangeEvent(CType(e.Row,dt_EmpleoAnt4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_EmpleoAnt4RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_EmpleoAnt4RowDeleting(Me, New dt_EmpleoAnt4RowChangeEvent(CType(e.Row,dt_EmpleoAnt4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_EmpleoAnt4Row(ByVal row As dt_EmpleoAnt4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_EmpleoAnt4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_ReferenciasDataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_ReferenciasRow)
        
        Private columnDomicilio As Global.System.Data.DataColumn
        
        Private columnNombreRef As Global.System.Data.DataColumn
        
        Private columnSexo As Global.System.Data.DataColumn
        
        Private columnOpcupacion As Global.System.Data.DataColumn
        
        Private columnParentesco As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Referencias"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomicilioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpcupacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpcupacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentescoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentesco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_ReferenciasRow
            Get
                Return CType(Me.Rows(index),dt_ReferenciasRow)
            End Get
        End Property
        
        Public Event dt_ReferenciasRowChanging As dt_ReferenciasRowChangeEventHandler
        
        Public Event dt_ReferenciasRowChanged As dt_ReferenciasRowChangeEventHandler
        
        Public Event dt_ReferenciasRowDeleting As dt_ReferenciasRowChangeEventHandler
        
        Public Event dt_ReferenciasRowDeleted As dt_ReferenciasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_ReferenciasRow(ByVal row As dt_ReferenciasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_ReferenciasRow(ByVal Domicilio As String, ByVal NombreRef As String, ByVal Sexo As String, ByVal Opcupacion As String, ByVal Parentesco As String, ByVal Telefono As String) As dt_ReferenciasRow
            Dim rowdt_ReferenciasRow As dt_ReferenciasRow = CType(Me.NewRow,dt_ReferenciasRow)
            Dim columnValuesArray() As Object = New Object() {Domicilio, NombreRef, Sexo, Opcupacion, Parentesco, Telefono}
            rowdt_ReferenciasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_ReferenciasRow)
            Return rowdt_ReferenciasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_ReferenciasDataTable = CType(MyBase.Clone,dt_ReferenciasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_ReferenciasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDomicilio = MyBase.Columns("Domicilio")
            Me.columnNombreRef = MyBase.Columns("NombreRef")
            Me.columnSexo = MyBase.Columns("Sexo")
            Me.columnOpcupacion = MyBase.Columns("Opcupacion")
            Me.columnParentesco = MyBase.Columns("Parentesco")
            Me.columnTelefono = MyBase.Columns("Telefono")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDomicilio = New Global.System.Data.DataColumn("Domicilio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio)
            Me.columnNombreRef = New Global.System.Data.DataColumn("NombreRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreRef)
            Me.columnSexo = New Global.System.Data.DataColumn("Sexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSexo)
            Me.columnOpcupacion = New Global.System.Data.DataColumn("Opcupacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpcupacion)
            Me.columnParentesco = New Global.System.Data.DataColumn("Parentesco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentesco)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_ReferenciasRow() As dt_ReferenciasRow
            Return CType(Me.NewRow,dt_ReferenciasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_ReferenciasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_ReferenciasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_ReferenciasRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_ReferenciasRowChanged(Me, New dt_ReferenciasRowChangeEvent(CType(e.Row,dt_ReferenciasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_ReferenciasRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_ReferenciasRowChanging(Me, New dt_ReferenciasRowChangeEvent(CType(e.Row,dt_ReferenciasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_ReferenciasRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_ReferenciasRowDeleted(Me, New dt_ReferenciasRowChangeEvent(CType(e.Row,dt_ReferenciasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_ReferenciasRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_ReferenciasRowDeleting(Me, New dt_ReferenciasRowChangeEvent(CType(e.Row,dt_ReferenciasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_ReferenciasRow(ByVal row As dt_ReferenciasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_ReferenciasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_IengresosDataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_IengresosRow)
        
        Private columnIngreso_Mensual As Global.System.Data.DataColumn
        
        Private columnIngreso_Adicional As Global.System.Data.DataColumn
        
        Private columnGasto_Mensual As Global.System.Data.DataColumn
        
        Private columnPago_Mensual As Global.System.Data.DataColumn
        
        Private columnValor_Vivienda As Global.System.Data.DataColumn
        
        Private columnvehiculo As Global.System.Data.DataColumn
        
        Private columnmodelo As Global.System.Data.DataColumn
        
        Private columnValor_Vehiculo As Global.System.Data.DataColumn
        
        Private columnTipoVivienda As Global.System.Data.DataColumn
        
        Private columnTipo_vivi As Global.System.Data.DataColumn
        
        Private columnDependienteEconomico As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Iengresos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ingreso_MensualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngreso_Mensual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ingreso_AdicionalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngreso_Adicional
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Gasto_MensualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGasto_Mensual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pago_MensualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPago_Mensual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Valor_ViviendaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor_Vivienda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vehiculoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvehiculo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property modeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmodelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Valor_VehiculoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor_Vehiculo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoViviendaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoVivienda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_viviColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_vivi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DependienteEconomicoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDependienteEconomico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_IengresosRow
            Get
                Return CType(Me.Rows(index),dt_IengresosRow)
            End Get
        End Property
        
        Public Event dt_IengresosRowChanging As dt_IengresosRowChangeEventHandler
        
        Public Event dt_IengresosRowChanged As dt_IengresosRowChangeEventHandler
        
        Public Event dt_IengresosRowDeleting As dt_IengresosRowChangeEventHandler
        
        Public Event dt_IengresosRowDeleted As dt_IengresosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_IengresosRow(ByVal row As dt_IengresosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_IengresosRow(ByVal Ingreso_Mensual As String, ByVal Ingreso_Adicional As String, ByVal Gasto_Mensual As String, ByVal Pago_Mensual As String, ByVal Valor_Vivienda As String, ByVal vehiculo As String, ByVal modelo As String, ByVal Valor_Vehiculo As String, ByVal TipoVivienda As String, ByVal Tipo_vivi As String, ByVal DependienteEconomico As String) As dt_IengresosRow
            Dim rowdt_IengresosRow As dt_IengresosRow = CType(Me.NewRow,dt_IengresosRow)
            Dim columnValuesArray() As Object = New Object() {Ingreso_Mensual, Ingreso_Adicional, Gasto_Mensual, Pago_Mensual, Valor_Vivienda, vehiculo, modelo, Valor_Vehiculo, TipoVivienda, Tipo_vivi, DependienteEconomico}
            rowdt_IengresosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_IengresosRow)
            Return rowdt_IengresosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_IengresosDataTable = CType(MyBase.Clone,dt_IengresosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_IengresosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIngreso_Mensual = MyBase.Columns("Ingreso_Mensual")
            Me.columnIngreso_Adicional = MyBase.Columns("Ingreso_Adicional")
            Me.columnGasto_Mensual = MyBase.Columns("Gasto_Mensual")
            Me.columnPago_Mensual = MyBase.Columns("Pago_Mensual")
            Me.columnValor_Vivienda = MyBase.Columns("Valor_Vivienda")
            Me.columnvehiculo = MyBase.Columns("vehiculo")
            Me.columnmodelo = MyBase.Columns("modelo")
            Me.columnValor_Vehiculo = MyBase.Columns("Valor_Vehiculo")
            Me.columnTipoVivienda = MyBase.Columns("TipoVivienda")
            Me.columnTipo_vivi = MyBase.Columns("Tipo_vivi")
            Me.columnDependienteEconomico = MyBase.Columns("DependienteEconomico")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIngreso_Mensual = New Global.System.Data.DataColumn("Ingreso_Mensual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngreso_Mensual)
            Me.columnIngreso_Adicional = New Global.System.Data.DataColumn("Ingreso_Adicional", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngreso_Adicional)
            Me.columnGasto_Mensual = New Global.System.Data.DataColumn("Gasto_Mensual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGasto_Mensual)
            Me.columnPago_Mensual = New Global.System.Data.DataColumn("Pago_Mensual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPago_Mensual)
            Me.columnValor_Vivienda = New Global.System.Data.DataColumn("Valor_Vivienda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor_Vivienda)
            Me.columnvehiculo = New Global.System.Data.DataColumn("vehiculo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvehiculo)
            Me.columnmodelo = New Global.System.Data.DataColumn("modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmodelo)
            Me.columnValor_Vehiculo = New Global.System.Data.DataColumn("Valor_Vehiculo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor_Vehiculo)
            Me.columnTipoVivienda = New Global.System.Data.DataColumn("TipoVivienda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoVivienda)
            Me.columnTipo_vivi = New Global.System.Data.DataColumn("Tipo_vivi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_vivi)
            Me.columnDependienteEconomico = New Global.System.Data.DataColumn("DependienteEconomico", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDependienteEconomico)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_IengresosRow() As dt_IengresosRow
            Return CType(Me.NewRow,dt_IengresosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_IengresosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_IengresosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_IengresosRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_IengresosRowChanged(Me, New dt_IengresosRowChangeEvent(CType(e.Row,dt_IengresosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_IengresosRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_IengresosRowChanging(Me, New dt_IengresosRowChangeEvent(CType(e.Row,dt_IengresosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_IengresosRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_IengresosRowDeleted(Me, New dt_IengresosRowChangeEvent(CType(e.Row,dt_IengresosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_IengresosRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_IengresosRowDeleting(Me, New dt_IengresosRowChangeEvent(CType(e.Row,dt_IengresosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_IengresosRow(ByVal row As dt_IengresosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_IengresosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_Cursos1DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_Cursos1Row)
        
        Private columnCurso As Global.System.Data.DataColumn
        
        Private columnFechaInicio As Global.System.Data.DataColumn
        
        Private columnFechaFin As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        Private columnFinalizado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Cursos1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CursoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_Cursos1Row
            Get
                Return CType(Me.Rows(index),dt_Cursos1Row)
            End Get
        End Property
        
        Public Event dt_Cursos1RowChanging As dt_Cursos1RowChangeEventHandler
        
        Public Event dt_Cursos1RowChanged As dt_Cursos1RowChangeEventHandler
        
        Public Event dt_Cursos1RowDeleting As dt_Cursos1RowChangeEventHandler
        
        Public Event dt_Cursos1RowDeleted As dt_Cursos1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_Cursos1Row(ByVal row As dt_Cursos1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_Cursos1Row(ByVal Curso As String, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal Instructor As String, ByVal Finalizado As String) As dt_Cursos1Row
            Dim rowdt_Cursos1Row As dt_Cursos1Row = CType(Me.NewRow,dt_Cursos1Row)
            Dim columnValuesArray() As Object = New Object() {Curso, FechaInicio, FechaFin, Instructor, Finalizado}
            rowdt_Cursos1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_Cursos1Row)
            Return rowdt_Cursos1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_Cursos1DataTable = CType(MyBase.Clone,dt_Cursos1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_Cursos1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCurso = MyBase.Columns("Curso")
            Me.columnFechaInicio = MyBase.Columns("FechaInicio")
            Me.columnFechaFin = MyBase.Columns("FechaFin")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnFinalizado = MyBase.Columns("Finalizado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCurso = New Global.System.Data.DataColumn("Curso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurso)
            Me.columnFechaInicio = New Global.System.Data.DataColumn("FechaInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicio)
            Me.columnFechaFin = New Global.System.Data.DataColumn("FechaFin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFin)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnFinalizado = New Global.System.Data.DataColumn("Finalizado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalizado)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_Cursos1Row() As dt_Cursos1Row
            Return CType(Me.NewRow,dt_Cursos1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_Cursos1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_Cursos1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_Cursos1RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_Cursos1RowChanged(Me, New dt_Cursos1RowChangeEvent(CType(e.Row,dt_Cursos1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_Cursos1RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_Cursos1RowChanging(Me, New dt_Cursos1RowChangeEvent(CType(e.Row,dt_Cursos1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_Cursos1RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_Cursos1RowDeleted(Me, New dt_Cursos1RowChangeEvent(CType(e.Row,dt_Cursos1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_Cursos1RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_Cursos1RowDeleting(Me, New dt_Cursos1RowChangeEvent(CType(e.Row,dt_Cursos1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_Cursos1Row(ByVal row As dt_Cursos1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_Cursos1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_mafiliacion1DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_mafiliacion1Row)
        
        Private columnForma As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_mafiliacion1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_mafiliacion1Row
            Get
                Return CType(Me.Rows(index),dt_mafiliacion1Row)
            End Get
        End Property
        
        Public Event dt_mafiliacion1RowChanging As dt_mafiliacion1RowChangeEventHandler
        
        Public Event dt_mafiliacion1RowChanged As dt_mafiliacion1RowChangeEventHandler
        
        Public Event dt_mafiliacion1RowDeleting As dt_mafiliacion1RowChangeEventHandler
        
        Public Event dt_mafiliacion1RowDeleted As dt_mafiliacion1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_mafiliacion1Row(ByVal row As dt_mafiliacion1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_mafiliacion1Row(ByVal Forma As String, ByVal Ubicacion As String, ByVal Cantidad As String) As dt_mafiliacion1Row
            Dim rowdt_mafiliacion1Row As dt_mafiliacion1Row = CType(Me.NewRow,dt_mafiliacion1Row)
            Dim columnValuesArray() As Object = New Object() {Forma, Ubicacion, Cantidad}
            rowdt_mafiliacion1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_mafiliacion1Row)
            Return rowdt_mafiliacion1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_mafiliacion1DataTable = CType(MyBase.Clone,dt_mafiliacion1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_mafiliacion1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnForma = MyBase.Columns("Forma")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCantidad = MyBase.Columns("Cantidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnForma = New Global.System.Data.DataColumn("Forma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForma)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_mafiliacion1Row() As dt_mafiliacion1Row
            Return CType(Me.NewRow,dt_mafiliacion1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_mafiliacion1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_mafiliacion1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_mafiliacion1RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion1RowChanged(Me, New dt_mafiliacion1RowChangeEvent(CType(e.Row,dt_mafiliacion1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_mafiliacion1RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion1RowChanging(Me, New dt_mafiliacion1RowChangeEvent(CType(e.Row,dt_mafiliacion1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_mafiliacion1RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion1RowDeleted(Me, New dt_mafiliacion1RowChangeEvent(CType(e.Row,dt_mafiliacion1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_mafiliacion1RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion1RowDeleting(Me, New dt_mafiliacion1RowChangeEvent(CType(e.Row,dt_mafiliacion1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_mafiliacion1Row(ByVal row As dt_mafiliacion1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_mafiliacion1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_mafiliacion2DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_mafiliacion2Row)
        
        Private columnForma As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_mafiliacion2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_mafiliacion2Row
            Get
                Return CType(Me.Rows(index),dt_mafiliacion2Row)
            End Get
        End Property
        
        Public Event dt_mafiliacion2RowChanging As dt_mafiliacion2RowChangeEventHandler
        
        Public Event dt_mafiliacion2RowChanged As dt_mafiliacion2RowChangeEventHandler
        
        Public Event dt_mafiliacion2RowDeleting As dt_mafiliacion2RowChangeEventHandler
        
        Public Event dt_mafiliacion2RowDeleted As dt_mafiliacion2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_mafiliacion2Row(ByVal row As dt_mafiliacion2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_mafiliacion2Row(ByVal Forma As String, ByVal Ubicacion As String, ByVal Cantidad As String) As dt_mafiliacion2Row
            Dim rowdt_mafiliacion2Row As dt_mafiliacion2Row = CType(Me.NewRow,dt_mafiliacion2Row)
            Dim columnValuesArray() As Object = New Object() {Forma, Ubicacion, Cantidad}
            rowdt_mafiliacion2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_mafiliacion2Row)
            Return rowdt_mafiliacion2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_mafiliacion2DataTable = CType(MyBase.Clone,dt_mafiliacion2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_mafiliacion2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnForma = MyBase.Columns("Forma")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCantidad = MyBase.Columns("Cantidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnForma = New Global.System.Data.DataColumn("Forma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForma)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_mafiliacion2Row() As dt_mafiliacion2Row
            Return CType(Me.NewRow,dt_mafiliacion2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_mafiliacion2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_mafiliacion2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_mafiliacion2RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion2RowChanged(Me, New dt_mafiliacion2RowChangeEvent(CType(e.Row,dt_mafiliacion2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_mafiliacion2RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion2RowChanging(Me, New dt_mafiliacion2RowChangeEvent(CType(e.Row,dt_mafiliacion2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_mafiliacion2RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion2RowDeleted(Me, New dt_mafiliacion2RowChangeEvent(CType(e.Row,dt_mafiliacion2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_mafiliacion2RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion2RowDeleting(Me, New dt_mafiliacion2RowChangeEvent(CType(e.Row,dt_mafiliacion2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_mafiliacion2Row(ByVal row As dt_mafiliacion2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_mafiliacion2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_mafiliacion3DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_mafiliacion3Row)
        
        Private columnForma As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_mafiliacion3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_mafiliacion3Row
            Get
                Return CType(Me.Rows(index),dt_mafiliacion3Row)
            End Get
        End Property
        
        Public Event dt_mafiliacion3RowChanging As dt_mafiliacion3RowChangeEventHandler
        
        Public Event dt_mafiliacion3RowChanged As dt_mafiliacion3RowChangeEventHandler
        
        Public Event dt_mafiliacion3RowDeleting As dt_mafiliacion3RowChangeEventHandler
        
        Public Event dt_mafiliacion3RowDeleted As dt_mafiliacion3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_mafiliacion3Row(ByVal row As dt_mafiliacion3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_mafiliacion3Row(ByVal Forma As String, ByVal Ubicacion As String, ByVal Cantidad As String) As dt_mafiliacion3Row
            Dim rowdt_mafiliacion3Row As dt_mafiliacion3Row = CType(Me.NewRow,dt_mafiliacion3Row)
            Dim columnValuesArray() As Object = New Object() {Forma, Ubicacion, Cantidad}
            rowdt_mafiliacion3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_mafiliacion3Row)
            Return rowdt_mafiliacion3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_mafiliacion3DataTable = CType(MyBase.Clone,dt_mafiliacion3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_mafiliacion3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnForma = MyBase.Columns("Forma")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCantidad = MyBase.Columns("Cantidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnForma = New Global.System.Data.DataColumn("Forma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForma)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_mafiliacion3Row() As dt_mafiliacion3Row
            Return CType(Me.NewRow,dt_mafiliacion3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_mafiliacion3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_mafiliacion3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_mafiliacion3RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion3RowChanged(Me, New dt_mafiliacion3RowChangeEvent(CType(e.Row,dt_mafiliacion3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_mafiliacion3RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion3RowChanging(Me, New dt_mafiliacion3RowChangeEvent(CType(e.Row,dt_mafiliacion3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_mafiliacion3RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion3RowDeleted(Me, New dt_mafiliacion3RowChangeEvent(CType(e.Row,dt_mafiliacion3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_mafiliacion3RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_mafiliacion3RowDeleting(Me, New dt_mafiliacion3RowChangeEvent(CType(e.Row,dt_mafiliacion3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_mafiliacion3Row(ByVal row As dt_mafiliacion3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_mafiliacion3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_Cursos2DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_Cursos2Row)
        
        Private columnCurso As Global.System.Data.DataColumn
        
        Private columnFechaInicio As Global.System.Data.DataColumn
        
        Private columnFechaFin As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        Private columnFinalizado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Cursos2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CursoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_Cursos2Row
            Get
                Return CType(Me.Rows(index),dt_Cursos2Row)
            End Get
        End Property
        
        Public Event dt_Cursos2RowChanging As dt_Cursos2RowChangeEventHandler
        
        Public Event dt_Cursos2RowChanged As dt_Cursos2RowChangeEventHandler
        
        Public Event dt_Cursos2RowDeleting As dt_Cursos2RowChangeEventHandler
        
        Public Event dt_Cursos2RowDeleted As dt_Cursos2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_Cursos2Row(ByVal row As dt_Cursos2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_Cursos2Row(ByVal Curso As String, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal Instructor As String, ByVal Finalizado As String) As dt_Cursos2Row
            Dim rowdt_Cursos2Row As dt_Cursos2Row = CType(Me.NewRow,dt_Cursos2Row)
            Dim columnValuesArray() As Object = New Object() {Curso, FechaInicio, FechaFin, Instructor, Finalizado}
            rowdt_Cursos2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_Cursos2Row)
            Return rowdt_Cursos2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_Cursos2DataTable = CType(MyBase.Clone,dt_Cursos2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_Cursos2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCurso = MyBase.Columns("Curso")
            Me.columnFechaInicio = MyBase.Columns("FechaInicio")
            Me.columnFechaFin = MyBase.Columns("FechaFin")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnFinalizado = MyBase.Columns("Finalizado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCurso = New Global.System.Data.DataColumn("Curso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurso)
            Me.columnFechaInicio = New Global.System.Data.DataColumn("FechaInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicio)
            Me.columnFechaFin = New Global.System.Data.DataColumn("FechaFin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFin)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnFinalizado = New Global.System.Data.DataColumn("Finalizado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalizado)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_Cursos2Row() As dt_Cursos2Row
            Return CType(Me.NewRow,dt_Cursos2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_Cursos2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_Cursos2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_Cursos2RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_Cursos2RowChanged(Me, New dt_Cursos2RowChangeEvent(CType(e.Row,dt_Cursos2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_Cursos2RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_Cursos2RowChanging(Me, New dt_Cursos2RowChangeEvent(CType(e.Row,dt_Cursos2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_Cursos2RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_Cursos2RowDeleted(Me, New dt_Cursos2RowChangeEvent(CType(e.Row,dt_Cursos2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_Cursos2RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_Cursos2RowDeleting(Me, New dt_Cursos2RowChangeEvent(CType(e.Row,dt_Cursos2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_Cursos2Row(ByVal row As dt_Cursos2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_Cursos2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_Cursos3DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_Cursos3Row)
        
        Private columnCurso As Global.System.Data.DataColumn
        
        Private columnFechaInicio As Global.System.Data.DataColumn
        
        Private columnFechaFin As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        Private columnFinalizado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Cursos3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CursoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_Cursos3Row
            Get
                Return CType(Me.Rows(index),dt_Cursos3Row)
            End Get
        End Property
        
        Public Event dt_Cursos3RowChanging As dt_Cursos3RowChangeEventHandler
        
        Public Event dt_Cursos3RowChanged As dt_Cursos3RowChangeEventHandler
        
        Public Event dt_Cursos3RowDeleting As dt_Cursos3RowChangeEventHandler
        
        Public Event dt_Cursos3RowDeleted As dt_Cursos3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_Cursos3Row(ByVal row As dt_Cursos3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_Cursos3Row(ByVal Curso As String, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal Instructor As String, ByVal Finalizado As String) As dt_Cursos3Row
            Dim rowdt_Cursos3Row As dt_Cursos3Row = CType(Me.NewRow,dt_Cursos3Row)
            Dim columnValuesArray() As Object = New Object() {Curso, FechaInicio, FechaFin, Instructor, Finalizado}
            rowdt_Cursos3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_Cursos3Row)
            Return rowdt_Cursos3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_Cursos3DataTable = CType(MyBase.Clone,dt_Cursos3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_Cursos3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCurso = MyBase.Columns("Curso")
            Me.columnFechaInicio = MyBase.Columns("FechaInicio")
            Me.columnFechaFin = MyBase.Columns("FechaFin")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnFinalizado = MyBase.Columns("Finalizado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCurso = New Global.System.Data.DataColumn("Curso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurso)
            Me.columnFechaInicio = New Global.System.Data.DataColumn("FechaInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicio)
            Me.columnFechaFin = New Global.System.Data.DataColumn("FechaFin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFin)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnFinalizado = New Global.System.Data.DataColumn("Finalizado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalizado)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_Cursos3Row() As dt_Cursos3Row
            Return CType(Me.NewRow,dt_Cursos3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_Cursos3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_Cursos3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_Cursos3RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_Cursos3RowChanged(Me, New dt_Cursos3RowChangeEvent(CType(e.Row,dt_Cursos3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_Cursos3RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_Cursos3RowChanging(Me, New dt_Cursos3RowChangeEvent(CType(e.Row,dt_Cursos3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_Cursos3RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_Cursos3RowDeleted(Me, New dt_Cursos3RowChangeEvent(CType(e.Row,dt_Cursos3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_Cursos3RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_Cursos3RowDeleting(Me, New dt_Cursos3RowChangeEvent(CType(e.Row,dt_Cursos3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_Cursos3Row(ByVal row As dt_Cursos3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_Cursos3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_Cursos4DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_Cursos4Row)
        
        Private columnCurso As Global.System.Data.DataColumn
        
        Private columnFechaInicio As Global.System.Data.DataColumn
        
        Private columnFechaFin As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        Private columnFinalizado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Cursos4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CursoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_Cursos4Row
            Get
                Return CType(Me.Rows(index),dt_Cursos4Row)
            End Get
        End Property
        
        Public Event dt_Cursos4RowChanging As dt_Cursos4RowChangeEventHandler
        
        Public Event dt_Cursos4RowChanged As dt_Cursos4RowChangeEventHandler
        
        Public Event dt_Cursos4RowDeleting As dt_Cursos4RowChangeEventHandler
        
        Public Event dt_Cursos4RowDeleted As dt_Cursos4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_Cursos4Row(ByVal row As dt_Cursos4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_Cursos4Row(ByVal Curso As String, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal Instructor As String, ByVal Finalizado As String) As dt_Cursos4Row
            Dim rowdt_Cursos4Row As dt_Cursos4Row = CType(Me.NewRow,dt_Cursos4Row)
            Dim columnValuesArray() As Object = New Object() {Curso, FechaInicio, FechaFin, Instructor, Finalizado}
            rowdt_Cursos4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_Cursos4Row)
            Return rowdt_Cursos4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_Cursos4DataTable = CType(MyBase.Clone,dt_Cursos4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_Cursos4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCurso = MyBase.Columns("Curso")
            Me.columnFechaInicio = MyBase.Columns("FechaInicio")
            Me.columnFechaFin = MyBase.Columns("FechaFin")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnFinalizado = MyBase.Columns("Finalizado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCurso = New Global.System.Data.DataColumn("Curso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurso)
            Me.columnFechaInicio = New Global.System.Data.DataColumn("FechaInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicio)
            Me.columnFechaFin = New Global.System.Data.DataColumn("FechaFin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFin)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnFinalizado = New Global.System.Data.DataColumn("Finalizado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalizado)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_Cursos4Row() As dt_Cursos4Row
            Return CType(Me.NewRow,dt_Cursos4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_Cursos4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_Cursos4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_Cursos4RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_Cursos4RowChanged(Me, New dt_Cursos4RowChangeEvent(CType(e.Row,dt_Cursos4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_Cursos4RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_Cursos4RowChanging(Me, New dt_Cursos4RowChangeEvent(CType(e.Row,dt_Cursos4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_Cursos4RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_Cursos4RowDeleted(Me, New dt_Cursos4RowChangeEvent(CType(e.Row,dt_Cursos4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_Cursos4RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_Cursos4RowDeleting(Me, New dt_Cursos4RowChangeEvent(CType(e.Row,dt_Cursos4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_Cursos4Row(ByVal row As dt_Cursos4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Solicitud = New ds_Solicitud
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_Cursos4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_SolicitudRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Solicitud As dt_SolicitudDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Solicitud = CType(Me.Table,dt_SolicitudDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Empleado() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.Id_EmpleadoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Empleado' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lugar_Nacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.Lugar_NacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Lugar_Nacimiento' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.Lugar_NacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FotoEmpleado() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.FotoEmpleadoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FotoEmpleado' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.FotoEmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNac() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.FechaNacColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaNac' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.FechaNacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoCivil() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.EstadoCivilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EstadoCivil' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.EstadoCivilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RFC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.RFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RFC' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.RFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.CURPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CURP' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.CURPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMSS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.IMSSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMSS' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.IMSSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.DomicilioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.DomicilioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GradoEscolar() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.GradoEscolarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GradoEscolar' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.GradoEscolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Carrera() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.CarreraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Carrera' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.CarreraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PeriodoCarrera() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.PeriodoCarreraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PeriodoCarrera' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.PeriodoCarreraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpresaAnt() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.EmpresaAntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EmpresaAnt' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.EmpresaAntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuestoAnt() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.PuestoAntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuestoAnt' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.PuestoAntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PeriodoEmpleo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.PeriodoEmpleoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PeriodoEmpleo' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.PeriodoEmpleoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIngresoActual() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.FIngresoActualColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FIngresoActual' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.FIngresoActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Visita() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.Fecha_VisitaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha_Visita' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.Fecha_VisitaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Antecedentes_Penales() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.Antecedentes_PenalesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Antecedentes_Penales' de la tabla 'dt_Solicitud' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.Antecedentes_PenalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Demandas() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.DemandasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Demandas' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.DemandasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Examen_Medico() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.Examen_MedicoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Examen_Medico' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.Examen_MedicoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Antidoping() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.AntidopingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Antidoping' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.AntidopingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAntidoping() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.FechaAntidopingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAntidoping' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.FechaAntidopingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enfermedades() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.EnfermedadesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Enfermedades' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.EnfermedadesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObservacionesGenerales() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.ObservacionesGeneralesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ObservacionesGenerales' de la tabla 'dt_Solicitud' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.ObservacionesGeneralesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstudioSE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.EstudioSEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EstudioSE' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.EstudioSEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Conyuge() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.ConyugeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Conyuge' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.ConyugeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoConyuge() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.TelefonoConyugeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TelefonoConyuge' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.TelefonoConyugeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogoEmpresa() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.LogoEmpresaColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LogoEmpresa' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.LogoEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.NombreEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEmpresa' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.NombreEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoEmpleado() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.TelefonoEmpleadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TelefonoEmpleado' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.TelefonoEmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DomicilioEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.DomicilioEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DomicilioEmpresa' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.DomicilioEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCartaAPenales() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.FechaCartaAPenalesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaCartaAPenales' de la tabla 'dt_Solicitud' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.FechaCartaAPenalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaExMedico() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.FechaExMedicoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaExMedico' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.FechaExMedicoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExamenMedicoObservaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.ExamenMedicoObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ExamenMedicoObservaciones' de la tabla 'dt_Solicitud' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.ExamenMedicoObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AntidopingObservaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.AntidopingObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AntidopingObservaciones' de la tabla 'dt_Solicitud' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.AntidopingObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Psicometrico() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.PsicometricoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Psicometrico' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.PsicometricoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaPsicometrico() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.FechaPsicometricoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaPsicometrico' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.FechaPsicometricoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PsicometricoObservaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.PsicometricoObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PsicometricoObservaciones' de la tabla 'dt_Solicitud' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.PsicometricoObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave_Empleado() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.Clave_EmpleadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave_Empleado' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.Clave_EmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MunicipioVive() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Solicitud.MunicipioViveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MunicipioVive' de la tabla 'dt_Solicitud' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Solicitud.MunicipioViveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EmpleadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.Id_EmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EmpleadoNull()
            Me(Me.tabledt_Solicitud.Id_EmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tabledt_Solicitud.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLugar_NacimientoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.Lugar_NacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLugar_NacimientoNull()
            Me(Me.tabledt_Solicitud.Lugar_NacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFotoEmpleadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.FotoEmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFotoEmpleadoNull()
            Me(Me.tabledt_Solicitud.FotoEmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNacNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.FechaNacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNacNull()
            Me(Me.tabledt_Solicitud.FechaNacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.EstadoCivilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoCivilNull()
            Me(Me.tabledt_Solicitud.EstadoCivilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRFCNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.RFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRFCNull()
            Me(Me.tabledt_Solicitud.RFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURPNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.CURPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURPNull()
            Me(Me.tabledt_Solicitud.CURPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMSSNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.IMSSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMSSNull()
            Me(Me.tabledt_Solicitud.IMSSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilioNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.DomicilioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilioNull()
            Me(Me.tabledt_Solicitud.DomicilioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradoEscolarNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.GradoEscolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradoEscolarNull()
            Me(Me.tabledt_Solicitud.GradoEscolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCarreraNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.CarreraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCarreraNull()
            Me(Me.tabledt_Solicitud.CarreraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoCarreraNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.PeriodoCarreraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoCarreraNull()
            Me(Me.tabledt_Solicitud.PeriodoCarreraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpresaAntNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.EmpresaAntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpresaAntNull()
            Me(Me.tabledt_Solicitud.EmpresaAntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoAntNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.PuestoAntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoAntNull()
            Me(Me.tabledt_Solicitud.PuestoAntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoEmpleoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.PeriodoEmpleoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoEmpleoNull()
            Me(Me.tabledt_Solicitud.PeriodoEmpleoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIngresoActualNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.FIngresoActualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIngresoActualNull()
            Me(Me.tabledt_Solicitud.FIngresoActualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_VisitaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.Fecha_VisitaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_VisitaNull()
            Me(Me.tabledt_Solicitud.Fecha_VisitaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAntecedentes_PenalesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.Antecedentes_PenalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAntecedentes_PenalesNull()
            Me(Me.tabledt_Solicitud.Antecedentes_PenalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemandasNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.DemandasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemandasNull()
            Me(Me.tabledt_Solicitud.DemandasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExamen_MedicoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.Examen_MedicoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExamen_MedicoNull()
            Me(Me.tabledt_Solicitud.Examen_MedicoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAntidopingNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.AntidopingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAntidopingNull()
            Me(Me.tabledt_Solicitud.AntidopingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAntidopingNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.FechaAntidopingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAntidopingNull()
            Me(Me.tabledt_Solicitud.FechaAntidopingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnfermedadesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.EnfermedadesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnfermedadesNull()
            Me(Me.tabledt_Solicitud.EnfermedadesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionesGeneralesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.ObservacionesGeneralesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionesGeneralesNull()
            Me(Me.tabledt_Solicitud.ObservacionesGeneralesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstudioSENull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.EstudioSEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstudioSENull()
            Me(Me.tabledt_Solicitud.EstudioSEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConyugeNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.ConyugeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConyugeNull()
            Me(Me.tabledt_Solicitud.ConyugeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoConyugeNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.TelefonoConyugeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoConyugeNull()
            Me(Me.tabledt_Solicitud.TelefonoConyugeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoEmpresaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.LogoEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoEmpresaNull()
            Me(Me.tabledt_Solicitud.LogoEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.NombreEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaNull()
            Me(Me.tabledt_Solicitud.NombreEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoEmpleadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.TelefonoEmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoEmpleadoNull()
            Me(Me.tabledt_Solicitud.TelefonoEmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilioEmpresaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.DomicilioEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilioEmpresaNull()
            Me(Me.tabledt_Solicitud.DomicilioEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaCartaAPenalesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.FechaCartaAPenalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaCartaAPenalesNull()
            Me(Me.tabledt_Solicitud.FechaCartaAPenalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaExMedicoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.FechaExMedicoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaExMedicoNull()
            Me(Me.tabledt_Solicitud.FechaExMedicoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExamenMedicoObservacionesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.ExamenMedicoObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExamenMedicoObservacionesNull()
            Me(Me.tabledt_Solicitud.ExamenMedicoObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAntidopingObservacionesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.AntidopingObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAntidopingObservacionesNull()
            Me(Me.tabledt_Solicitud.AntidopingObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPsicometricoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.PsicometricoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPsicometricoNull()
            Me(Me.tabledt_Solicitud.PsicometricoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaPsicometricoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.FechaPsicometricoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaPsicometricoNull()
            Me(Me.tabledt_Solicitud.FechaPsicometricoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPsicometricoObservacionesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.PsicometricoObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPsicometricoObservacionesNull()
            Me(Me.tabledt_Solicitud.PsicometricoObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClave_EmpleadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.Clave_EmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClave_EmpleadoNull()
            Me(Me.tabledt_Solicitud.Clave_EmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMunicipioViveNull() As Boolean
            Return Me.IsNull(Me.tabledt_Solicitud.MunicipioViveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMunicipioViveNull()
            Me(Me.tabledt_Solicitud.MunicipioViveColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_DatosRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Datos As dt_DatosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Datos = CType(Me.Table,dt_DatosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Empleado() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Id_EmpleadoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Empleado' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCompleto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.NombreCompletoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCompleto' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.NombreCompletoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Departamento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Id_DepartamentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Departamento' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Id_DepartamentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Departamento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.DepartamentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Departamento' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.DepartamentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Puesto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Id_PuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Puesto' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Id_PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.PuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Puesto' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_EstadoCivil() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Id_EstadoCivilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_EstadoCivil' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Id_EstadoCivilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mail() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.MailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mail' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.MailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Status' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sexo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.SexoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sexo' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.SexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo_Vacaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Saldo_VacacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo_Vacaciones' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Saldo_VacacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SueldoBase() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.SueldoBaseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SueldoBase' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.SueldoBaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Calle' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroExterior() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.NumeroExteriorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroExterior' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.NumeroExteriorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroInterior() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.NumeroInteriorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroInterior' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.NumeroInteriorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Colonia() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ColoniaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Colonia' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ColoniaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zona() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ZonaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Zona' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ZonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciudad() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CiudadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ciudad' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CiudadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CP' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Latitud() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.LatitudColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Latitud' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.LatitudColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Longitud() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.LongitudColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Longitud' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.LongitudColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoMovil() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.TelefonoMovilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TelefonoMovil' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.TelefonoMovilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNac() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.FechaNacColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaNac' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.FechaNacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LugarNac() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.LugarNacColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LugarNac' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.LugarNacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantHijos() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CantHijosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CantHijos' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CantHijosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RFC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.RFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RFC' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.RFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CURPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CURP' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CURPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMSS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.IMSSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMSS' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.IMSSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.IFEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFE' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.IFEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoLicencia() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.TipoLicenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoLicencia' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.TipoLicenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumCartilla() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.NumCartillaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumCartilla' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.NumCartillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Certificacion() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CertificacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Certificacion' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CertificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConFamilia() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ConFamiliaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ConFamilia' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ConFamiliaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vicios() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ViciosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vicios' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ViciosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Habilidades() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.HabilidadesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Habilidades' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.HabilidadesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActivDepCult() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ActivDepCultColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ActivDepCult' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ActivDepCultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Idiomas() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.IdiomasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Idiomas' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.IdiomasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViveConFam() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ViveConFamColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ViveConFam' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ViveConFamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadHijos() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CantidadHijosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CantidadHijos' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CantidadHijosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edad() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.EdadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Edad' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.EdadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaIngreso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.FechaIngresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaIngreso' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.FechaIngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFin_Labores() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.FechaFin_LaboresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFin_Labores' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.FechaFin_LaboresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APaterno() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.APaternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'APaterno' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.APaternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMaterno() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.AMaternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AMaterno' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.AMaternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombres() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.NombresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombres' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.NombresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaVenceCred() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.FechaVenceCredColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaVenceCred' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.FechaVenceCredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpleadoRef() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.EmpleadoRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EmpleadoRef' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.EmpleadoRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntreCalle1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.EntreCalle1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EntreCalle1' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.EntreCalle1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntreCalle2() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.EntreCalle2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EntreCalle2' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.EntreCalle2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModoNacionalidad() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ModoNacionalidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ModoNacionalidad' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ModoNacionalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaisNacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.PaisNacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PaisNacimiento' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.PaisNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNaturalizacion() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.FechaNaturalizacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaNaturalizacion' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.FechaNaturalizacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasaporte() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.PasaporteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Pasaporte' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.PasaporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JefeArea() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.JefeAreaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'JefeArea' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.JefeAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UMF() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.UMFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UMF' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.UMFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaleRuta() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.SaleRutaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaleRuta' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.SaleRutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditoInfonavit() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CreditoInfonavitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CreditoInfonavit' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CreditoInfonavitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerificaServicios() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.VerificaServiciosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VerificaServicios' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.VerificaServiciosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CiudadNacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CiudadNacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CiudadNacimiento' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CiudadNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoNacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.EstadoNacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EstadoNacimiento' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.EstadoNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaisNac() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.PaisNacColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PaisNac' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.PaisNacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_ModoContactoD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Id_ModoContactoDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_ModoContactoD' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Id_ModoContactoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_ModoContacto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Id_ModoContactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_ModoContacto' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Id_ModoContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_EmpleadoP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Id_EmpleadoPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_EmpleadoP' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Id_EmpleadoPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUIP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.CUIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CUIP' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.CUIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mail_Personal() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Mail_PersonalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mail_Personal' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Mail_PersonalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porte_Armas() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Porte_ArmasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Porte_Armas' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Porte_ArmasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaActualiza() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.FechaActualizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaActualiza' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.FechaActualizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero_Credito() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Numero_CreditoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Numero_Credito' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Numero_CreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_Descuento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Tipo_DescuentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo_Descuento' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Tipo_DescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto_Descuento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Monto_DescuentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Monto_Descuento' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Monto_DescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vence_Licencia() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.Vence_LicenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vence_Licencia' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.Vence_LicenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modocontacto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.ModocontactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Modocontacto' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.ModocontactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LicenciaConducir() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Datos.LicenciaConducirColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LicenciaConducir' de la tabla 'dt_Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Datos.LicenciaConducirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EmpleadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Id_EmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EmpleadoNull()
            Me(Me.tabledt_Datos.Id_EmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tabledt_Datos.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCompletoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.NombreCompletoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCompletoNull()
            Me(Me.tabledt_Datos.NombreCompletoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_DepartamentoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Id_DepartamentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_DepartamentoNull()
            Me(Me.tabledt_Datos.Id_DepartamentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.DepartamentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartamentoNull()
            Me(Me.tabledt_Datos.DepartamentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_PuestoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Id_PuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_PuestoNull()
            Me(Me.tabledt_Datos.Id_PuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.PuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoNull()
            Me(Me.tabledt_Datos.PuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Id_EstadoCivilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EstadoCivilNull()
            Me(Me.tabledt_Datos.Id_EstadoCivilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMailNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.MailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMailNull()
            Me(Me.tabledt_Datos.MailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tabledt_Datos.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.SexoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexoNull()
            Me(Me.tabledt_Datos.SexoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldo_VacacionesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Saldo_VacacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldo_VacacionesNull()
            Me(Me.tabledt_Datos.Saldo_VacacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSueldoBaseNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.SueldoBaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSueldoBaseNull()
            Me(Me.tabledt_Datos.SueldoBaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tabledt_Datos.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroExteriorNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.NumeroExteriorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroExteriorNull()
            Me(Me.tabledt_Datos.NumeroExteriorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroInteriorNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.NumeroInteriorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroInteriorNull()
            Me(Me.tabledt_Datos.NumeroInteriorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColoniaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ColoniaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColoniaNull()
            Me(Me.tabledt_Datos.ColoniaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZonaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ZonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZonaNull()
            Me(Me.tabledt_Datos.ZonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiudadNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CiudadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiudadNull()
            Me(Me.tabledt_Datos.CiudadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCPNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCPNull()
            Me(Me.tabledt_Datos.CPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLatitudNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.LatitudColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLatitudNull()
            Me(Me.tabledt_Datos.LatitudColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.LongitudColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudNull()
            Me(Me.tabledt_Datos.LongitudColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tabledt_Datos.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoMovilNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.TelefonoMovilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoMovilNull()
            Me(Me.tabledt_Datos.TelefonoMovilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNacNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.FechaNacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNacNull()
            Me(Me.tabledt_Datos.FechaNacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLugarNacNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.LugarNacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLugarNacNull()
            Me(Me.tabledt_Datos.LugarNacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantHijosNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CantHijosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantHijosNull()
            Me(Me.tabledt_Datos.CantHijosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRFCNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.RFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRFCNull()
            Me(Me.tabledt_Datos.RFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURPNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CURPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURPNull()
            Me(Me.tabledt_Datos.CURPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMSSNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.IMSSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMSSNull()
            Me(Me.tabledt_Datos.IMSSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFENull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.IFEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFENull()
            Me(Me.tabledt_Datos.IFEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoLicenciaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.TipoLicenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoLicenciaNull()
            Me(Me.tabledt_Datos.TipoLicenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumCartillaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.NumCartillaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumCartillaNull()
            Me(Me.tabledt_Datos.NumCartillaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCertificacionNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CertificacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCertificacionNull()
            Me(Me.tabledt_Datos.CertificacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConFamiliaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ConFamiliaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConFamiliaNull()
            Me(Me.tabledt_Datos.ConFamiliaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViciosNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ViciosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViciosNull()
            Me(Me.tabledt_Datos.ViciosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHabilidadesNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.HabilidadesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHabilidadesNull()
            Me(Me.tabledt_Datos.HabilidadesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActivDepCultNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ActivDepCultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActivDepCultNull()
            Me(Me.tabledt_Datos.ActivDepCultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdiomasNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.IdiomasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdiomasNull()
            Me(Me.tabledt_Datos.IdiomasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViveConFamNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ViveConFamColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViveConFamNull()
            Me(Me.tabledt_Datos.ViveConFamColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadHijosNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CantidadHijosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadHijosNull()
            Me(Me.tabledt_Datos.CantidadHijosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdadNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.EdadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdadNull()
            Me(Me.tabledt_Datos.EdadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.FechaIngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaIngresoNull()
            Me(Me.tabledt_Datos.FechaIngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFin_LaboresNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.FechaFin_LaboresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFin_LaboresNull()
            Me(Me.tabledt_Datos.FechaFin_LaboresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPaternoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.APaternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPaternoNull()
            Me(Me.tabledt_Datos.APaternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMaternoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.AMaternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMaternoNull()
            Me(Me.tabledt_Datos.AMaternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombresNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.NombresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombresNull()
            Me(Me.tabledt_Datos.NombresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaVenceCredNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.FechaVenceCredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaVenceCredNull()
            Me(Me.tabledt_Datos.FechaVenceCredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpleadoRefNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.EmpleadoRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpleadoRefNull()
            Me(Me.tabledt_Datos.EmpleadoRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntreCalle1Null() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.EntreCalle1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntreCalle1Null()
            Me(Me.tabledt_Datos.EntreCalle1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntreCalle2Null() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.EntreCalle2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntreCalle2Null()
            Me(Me.tabledt_Datos.EntreCalle2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModoNacionalidadNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ModoNacionalidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModoNacionalidadNull()
            Me(Me.tabledt_Datos.ModoNacionalidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaisNacimientoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.PaisNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaisNacimientoNull()
            Me(Me.tabledt_Datos.PaisNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNaturalizacionNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.FechaNaturalizacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNaturalizacionNull()
            Me(Me.tabledt_Datos.FechaNaturalizacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasaporteNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.PasaporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasaporteNull()
            Me(Me.tabledt_Datos.PasaporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJefeAreaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.JefeAreaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJefeAreaNull()
            Me(Me.tabledt_Datos.JefeAreaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUMFNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.UMFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUMFNull()
            Me(Me.tabledt_Datos.UMFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaleRutaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.SaleRutaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaleRutaNull()
            Me(Me.tabledt_Datos.SaleRutaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditoInfonavitNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CreditoInfonavitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditoInfonavitNull()
            Me(Me.tabledt_Datos.CreditoInfonavitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerificaServiciosNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.VerificaServiciosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerificaServiciosNull()
            Me(Me.tabledt_Datos.VerificaServiciosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiudadNacimientoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CiudadNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiudadNacimientoNull()
            Me(Me.tabledt_Datos.CiudadNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNacimientoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.EstadoNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNacimientoNull()
            Me(Me.tabledt_Datos.EstadoNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaisNacNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.PaisNacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaisNacNull()
            Me(Me.tabledt_Datos.PaisNacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_ModoContactoDNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Id_ModoContactoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_ModoContactoDNull()
            Me(Me.tabledt_Datos.Id_ModoContactoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_ModoContactoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Id_ModoContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_ModoContactoNull()
            Me(Me.tabledt_Datos.Id_ModoContactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EmpleadoPNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Id_EmpleadoPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EmpleadoPNull()
            Me(Me.tabledt_Datos.Id_EmpleadoPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUIPNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.CUIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUIPNull()
            Me(Me.tabledt_Datos.CUIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMail_PersonalNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Mail_PersonalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMail_PersonalNull()
            Me(Me.tabledt_Datos.Mail_PersonalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorte_ArmasNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Porte_ArmasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorte_ArmasNull()
            Me(Me.tabledt_Datos.Porte_ArmasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaActualizaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.FechaActualizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaActualizaNull()
            Me(Me.tabledt_Datos.FechaActualizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumero_CreditoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Numero_CreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumero_CreditoNull()
            Me(Me.tabledt_Datos.Numero_CreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipo_DescuentoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Tipo_DescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipo_DescuentoNull()
            Me(Me.tabledt_Datos.Tipo_DescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonto_DescuentoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Monto_DescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonto_DescuentoNull()
            Me(Me.tabledt_Datos.Monto_DescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVence_LicenciaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.Vence_LicenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVence_LicenciaNull()
            Me(Me.tabledt_Datos.Vence_LicenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModocontactoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.ModocontactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModocontactoNull()
            Me(Me.tabledt_Datos.ModocontactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLicenciaConducirNull() As Boolean
            Return Me.IsNull(Me.tabledt_Datos.LicenciaConducirColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLicenciaConducirNull()
            Me(Me.tabledt_Datos.LicenciaConducirColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Dt_DatosERow
        Inherits Global.System.Data.DataRow
        
        Private tableDt_DatosE As Dt_DatosEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDt_DatosE = CType(Me.Table,Dt_DatosEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_GradoEscolar() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.Id_GradoEscolarColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_GradoEscolar' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.Id_GradoEscolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEscuela() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.NombreEscuelaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEscuela' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.NombreEscuelaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Carrera() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.CarreraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Carrera' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.CarreraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Especialidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.EspecialidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Especialidad' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.EspecialidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_TipoDoctoEscolar() As Long
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.Id_TipoDoctoEscolarColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_TipoDoctoEscolar' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.Id_TipoDoctoEscolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicio() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.FechaInicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaInicio' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.FechaInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFin() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.FechaFinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFin' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.FechaFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Promedio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.PromedioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Promedio' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.PromedioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaProfesional() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosE.CedulaProfesionalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaProfesional' de la tabla 'Dt_DatosE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosE.CedulaProfesionalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_GradoEscolarNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.Id_GradoEscolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_GradoEscolarNull()
            Me(Me.tableDt_DatosE.Id_GradoEscolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEscuelaNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.NombreEscuelaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEscuelaNull()
            Me(Me.tableDt_DatosE.NombreEscuelaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCarreraNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.CarreraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCarreraNull()
            Me(Me.tableDt_DatosE.CarreraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEspecialidadNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.EspecialidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEspecialidadNull()
            Me(Me.tableDt_DatosE.EspecialidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_TipoDoctoEscolarNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.Id_TipoDoctoEscolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_TipoDoctoEscolarNull()
            Me(Me.tableDt_DatosE.Id_TipoDoctoEscolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tableDt_DatosE.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaInicioNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.FechaInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaInicioNull()
            Me(Me.tableDt_DatosE.FechaInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFinNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.FechaFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFinNull()
            Me(Me.tableDt_DatosE.FechaFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPromedioNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.PromedioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPromedioNull()
            Me(Me.tableDt_DatosE.PromedioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaProfesionalNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosE.CedulaProfesionalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaProfesionalNull()
            Me(Me.tableDt_DatosE.CedulaProfesionalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Dt_DatosFRow
        Inherits Global.System.Data.DataRow
        
        Private tableDt_DatosF As Dt_DatosFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDt_DatosF = CType(Me.Table,Dt_DatosFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parentesco() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.ParentescoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Parentesco' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.ParentescoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.FechaNacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaNacimiento' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.FechaNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Direccion' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciudad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.CiudadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ciudad' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.CiudadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vive() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.ViveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vive' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.ViveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MismoDomicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.MismoDomicilioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MismoDomicilio' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.MismoDomicilioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dependiente() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.DependienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dependiente' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.DependienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_TipoParentesco() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.Id_TipoParentescoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_TipoParentesco' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.Id_TipoParentescoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Ciudad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_DatosF.Id_CiudadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Ciudad' de la tabla 'Dt_DatosF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_DatosF.Id_CiudadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableDt_DatosF.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParentescoNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.ParentescoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParentescoNull()
            Me(Me.tableDt_DatosF.ParentescoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNacimientoNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.FechaNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNacimientoNull()
            Me(Me.tableDt_DatosF.FechaNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableDt_DatosF.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiudadNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.CiudadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiudadNull()
            Me(Me.tableDt_DatosF.CiudadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tableDt_DatosF.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViveNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.ViveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViveNull()
            Me(Me.tableDt_DatosF.ViveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMismoDomicilioNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.MismoDomicilioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMismoDomicilioNull()
            Me(Me.tableDt_DatosF.MismoDomicilioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDependienteNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.DependienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDependienteNull()
            Me(Me.tableDt_DatosF.DependienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_TipoParentescoNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.Id_TipoParentescoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_TipoParentescoNull()
            Me(Me.tableDt_DatosF.Id_TipoParentescoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_CiudadNull() As Boolean
            Return Me.IsNull(Me.tableDt_DatosF.Id_CiudadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_CiudadNull()
            Me(Me.tableDt_DatosF.Id_CiudadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Dt_PadreRow
        Inherits Global.System.Data.DataRow
        
        Private tableDt_Padre As Dt_PadreDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDt_Padre = CType(Me.Table,Dt_PadreDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_EmpleadoFamiliares() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Padre.Id_EmpleadoFamiliaresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_EmpleadoFamiliares' de la tabla 'Dt_Padre' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Padre.Id_EmpleadoFamiliaresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Padre.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'Dt_Padre' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Padre.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Padre.FechaNacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaNacimiento' de la tabla 'Dt_Padre' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Padre.FechaNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vive() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Padre.ViveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vive' de la tabla 'Dt_Padre' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Padre.ViveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EmpleadoFamiliaresNull() As Boolean
            Return Me.IsNull(Me.tableDt_Padre.Id_EmpleadoFamiliaresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EmpleadoFamiliaresNull()
            Me(Me.tableDt_Padre.Id_EmpleadoFamiliaresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableDt_Padre.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableDt_Padre.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNacimientoNull() As Boolean
            Return Me.IsNull(Me.tableDt_Padre.FechaNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNacimientoNull()
            Me(Me.tableDt_Padre.FechaNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViveNull() As Boolean
            Return Me.IsNull(Me.tableDt_Padre.ViveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViveNull()
            Me(Me.tableDt_Padre.ViveColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Dt_MadreRow
        Inherits Global.System.Data.DataRow
        
        Private tableDt_Madre As Dt_MadreDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDt_Madre = CType(Me.Table,Dt_MadreDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_EmpleadoFamiliares() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Madre.Id_EmpleadoFamiliaresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_EmpleadoFamiliares' de la tabla 'Dt_Madre' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Madre.Id_EmpleadoFamiliaresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Madre.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'Dt_Madre' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Madre.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Madre.FechaNacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaNacimiento' de la tabla 'Dt_Madre' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Madre.FechaNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vive() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Madre.ViveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vive' de la tabla 'Dt_Madre' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Madre.ViveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EmpleadoFamiliaresNull() As Boolean
            Return Me.IsNull(Me.tableDt_Madre.Id_EmpleadoFamiliaresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EmpleadoFamiliaresNull()
            Me(Me.tableDt_Madre.Id_EmpleadoFamiliaresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableDt_Madre.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableDt_Madre.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNacimientoNull() As Boolean
            Return Me.IsNull(Me.tableDt_Madre.FechaNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNacimientoNull()
            Me(Me.tableDt_Madre.FechaNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViveNull() As Boolean
            Return Me.IsNull(Me.tableDt_Madre.ViveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViveNull()
            Me(Me.tableDt_Madre.ViveColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Dt_HermanosRow
        Inherits Global.System.Data.DataRow
        
        Private tableDt_Hermanos As Dt_HermanosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDt_Hermanos = CType(Me.Table,Dt_HermanosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_EmpleadoFamiliares() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Hermanos.Id_EmpleadoFamiliaresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_EmpleadoFamiliares' de la tabla 'Dt_Hermanos' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Hermanos.Id_EmpleadoFamiliaresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Hermanos.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'Dt_Hermanos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Hermanos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EmpleadoFamiliaresNull() As Boolean
            Return Me.IsNull(Me.tableDt_Hermanos.Id_EmpleadoFamiliaresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EmpleadoFamiliaresNull()
            Me(Me.tableDt_Hermanos.Id_EmpleadoFamiliaresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableDt_Hermanos.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableDt_Hermanos.NombreColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Dt_RasgosRow
        Inherits Global.System.Data.DataRow
        
        Private tableDt_Rasgos As Dt_RasgosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDt_Rasgos = CType(Me.Table,Dt_RasgosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Empleado() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.Id_EmpleadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Empleado' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Peso() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.PesoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Peso' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.PesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estatura() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.EstaturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estatura' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.EstaturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tsangre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.TsangreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tsangre' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.TsangreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property complexion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.complexionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'complexion' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.complexionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ccabello() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.ccabelloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ccabello' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.ccabelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cpiel() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.cpielColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cpiel' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.cpielColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cojos() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_Rasgos.cojosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cojos' de la tabla 'Dt_Rasgos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_Rasgos.cojosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EmpleadoNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.Id_EmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EmpleadoNull()
            Me(Me.tableDt_Rasgos.Id_EmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPesoNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.PesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPesoNull()
            Me(Me.tableDt_Rasgos.PesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstaturaNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.EstaturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstaturaNull()
            Me(Me.tableDt_Rasgos.EstaturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTsangreNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.TsangreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTsangreNull()
            Me(Me.tableDt_Rasgos.TsangreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableDt_Rasgos.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscomplexionNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.complexionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcomplexionNull()
            Me(Me.tableDt_Rasgos.complexionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsccabelloNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.ccabelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetccabelloNull()
            Me(Me.tableDt_Rasgos.ccabelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscpielNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.cpielColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcpielNull()
            Me(Me.tableDt_Rasgos.cpielColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscojosNull() As Boolean
            Return Me.IsNull(Me.tableDt_Rasgos.cojosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcojosNull()
            Me(Me.tableDt_Rasgos.cojosColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_EmpleoAnt1Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_EmpleoAnt1 As dt_EmpleoAnt1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_EmpleoAnt1 = CType(Me.Table,dt_EmpleoAnt1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.NombreEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEmpresa' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.NombreEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.PuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Puesto' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotivoBaja() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.MotivoBajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MotivoBaja' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.MotivoBajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.DomicilioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.DomicilioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuestoJefe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.PuestoJefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuestoJefe' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.PuestoJefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SueldoFin() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.SueldoFinColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SueldoFin' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.SueldoFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpresaSeg() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.EmpresaSegColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EmpresaSeg' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.EmpresaSegColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaIngreso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.FechaIngresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaIngreso' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.FechaIngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaBaja() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.FechaBajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaBaja' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.FechaBajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreJefe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt1.NombreJefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreJefe' de la tabla 'dt_EmpleoAnt1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt1.NombreJefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.NombreEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaNull()
            Me(Me.tabledt_EmpleoAnt1.NombreEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.PuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoNull()
            Me(Me.tabledt_EmpleoAnt1.PuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoBajaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.MotivoBajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoBajaNull()
            Me(Me.tabledt_EmpleoAnt1.MotivoBajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilioNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.DomicilioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilioNull()
            Me(Me.tabledt_EmpleoAnt1.DomicilioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoJefeNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.PuestoJefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoJefeNull()
            Me(Me.tabledt_EmpleoAnt1.PuestoJefeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tabledt_EmpleoAnt1.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSueldoFinNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.SueldoFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSueldoFinNull()
            Me(Me.tabledt_EmpleoAnt1.SueldoFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpresaSegNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.EmpresaSegColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpresaSegNull()
            Me(Me.tabledt_EmpleoAnt1.EmpresaSegColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.FechaIngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaIngresoNull()
            Me(Me.tabledt_EmpleoAnt1.FechaIngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaBajaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.FechaBajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaBajaNull()
            Me(Me.tabledt_EmpleoAnt1.FechaBajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreJefeNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt1.NombreJefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreJefeNull()
            Me(Me.tabledt_EmpleoAnt1.NombreJefeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_EmpleoAnt2Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_EmpleoAnt2 As dt_EmpleoAnt2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_EmpleoAnt2 = CType(Me.Table,dt_EmpleoAnt2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.NombreEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEmpresa' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.NombreEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.PuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Puesto' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotivoBaja() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.MotivoBajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MotivoBaja' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.MotivoBajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.DomicilioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.DomicilioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuestoJefe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.PuestoJefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuestoJefe' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.PuestoJefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SueldoFin() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.SueldoFinColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SueldoFin' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.SueldoFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpresaSeg() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.EmpresaSegColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EmpresaSeg' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.EmpresaSegColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaIngreso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.FechaIngresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaIngreso' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.FechaIngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaBaja() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.FechaBajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaBaja' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.FechaBajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreJefe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt2.NombreJefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreJefe' de la tabla 'dt_EmpleoAnt2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt2.NombreJefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.NombreEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaNull()
            Me(Me.tabledt_EmpleoAnt2.NombreEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.PuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoNull()
            Me(Me.tabledt_EmpleoAnt2.PuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoBajaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.MotivoBajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoBajaNull()
            Me(Me.tabledt_EmpleoAnt2.MotivoBajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilioNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.DomicilioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilioNull()
            Me(Me.tabledt_EmpleoAnt2.DomicilioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoJefeNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.PuestoJefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoJefeNull()
            Me(Me.tabledt_EmpleoAnt2.PuestoJefeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tabledt_EmpleoAnt2.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSueldoFinNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.SueldoFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSueldoFinNull()
            Me(Me.tabledt_EmpleoAnt2.SueldoFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpresaSegNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.EmpresaSegColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpresaSegNull()
            Me(Me.tabledt_EmpleoAnt2.EmpresaSegColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.FechaIngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaIngresoNull()
            Me(Me.tabledt_EmpleoAnt2.FechaIngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaBajaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.FechaBajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaBajaNull()
            Me(Me.tabledt_EmpleoAnt2.FechaBajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreJefeNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt2.NombreJefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreJefeNull()
            Me(Me.tabledt_EmpleoAnt2.NombreJefeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_EmpleoAnt3Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_EmpleoAnt3 As dt_EmpleoAnt3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_EmpleoAnt3 = CType(Me.Table,dt_EmpleoAnt3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.NombreEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEmpresa' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.NombreEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.PuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Puesto' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotivoBaja() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.MotivoBajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MotivoBaja' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.MotivoBajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.DomicilioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.DomicilioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuestoJefe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.PuestoJefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuestoJefe' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.PuestoJefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SueldoFin() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.SueldoFinColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SueldoFin' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.SueldoFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpresaSeg() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.EmpresaSegColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EmpresaSeg' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.EmpresaSegColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaIngreso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.FechaIngresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaIngreso' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.FechaIngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaBaja() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.FechaBajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaBaja' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.FechaBajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreJefe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt3.NombreJefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreJefe' de la tabla 'dt_EmpleoAnt3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt3.NombreJefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.NombreEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaNull()
            Me(Me.tabledt_EmpleoAnt3.NombreEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.PuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoNull()
            Me(Me.tabledt_EmpleoAnt3.PuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoBajaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.MotivoBajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoBajaNull()
            Me(Me.tabledt_EmpleoAnt3.MotivoBajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilioNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.DomicilioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilioNull()
            Me(Me.tabledt_EmpleoAnt3.DomicilioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoJefeNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.PuestoJefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoJefeNull()
            Me(Me.tabledt_EmpleoAnt3.PuestoJefeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tabledt_EmpleoAnt3.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSueldoFinNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.SueldoFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSueldoFinNull()
            Me(Me.tabledt_EmpleoAnt3.SueldoFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpresaSegNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.EmpresaSegColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpresaSegNull()
            Me(Me.tabledt_EmpleoAnt3.EmpresaSegColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.FechaIngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaIngresoNull()
            Me(Me.tabledt_EmpleoAnt3.FechaIngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaBajaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.FechaBajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaBajaNull()
            Me(Me.tabledt_EmpleoAnt3.FechaBajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreJefeNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt3.NombreJefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreJefeNull()
            Me(Me.tabledt_EmpleoAnt3.NombreJefeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_EmpleoAnt4Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_EmpleoAnt4 As dt_EmpleoAnt4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_EmpleoAnt4 = CType(Me.Table,dt_EmpleoAnt4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.NombreEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEmpresa' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.NombreEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.PuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Puesto' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotivoBaja() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.MotivoBajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MotivoBaja' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.MotivoBajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.DomicilioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.DomicilioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuestoJefe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.PuestoJefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuestoJefe' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.PuestoJefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SueldoFin() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.SueldoFinColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SueldoFin' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.SueldoFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpresaSeg() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.EmpresaSegColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EmpresaSeg' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.EmpresaSegColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaIngreso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.FechaIngresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaIngreso' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.FechaIngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaBaja() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.FechaBajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaBaja' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.FechaBajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreJefe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_EmpleoAnt4.NombreJefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreJefe' de la tabla 'dt_EmpleoAnt4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_EmpleoAnt4.NombreJefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.NombreEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaNull()
            Me(Me.tabledt_EmpleoAnt4.NombreEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.PuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoNull()
            Me(Me.tabledt_EmpleoAnt4.PuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoBajaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.MotivoBajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoBajaNull()
            Me(Me.tabledt_EmpleoAnt4.MotivoBajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilioNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.DomicilioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilioNull()
            Me(Me.tabledt_EmpleoAnt4.DomicilioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoJefeNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.PuestoJefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoJefeNull()
            Me(Me.tabledt_EmpleoAnt4.PuestoJefeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tabledt_EmpleoAnt4.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSueldoFinNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.SueldoFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSueldoFinNull()
            Me(Me.tabledt_EmpleoAnt4.SueldoFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpresaSegNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.EmpresaSegColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpresaSegNull()
            Me(Me.tabledt_EmpleoAnt4.EmpresaSegColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.FechaIngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaIngresoNull()
            Me(Me.tabledt_EmpleoAnt4.FechaIngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaBajaNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.FechaBajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaBajaNull()
            Me(Me.tabledt_EmpleoAnt4.FechaBajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreJefeNull() As Boolean
            Return Me.IsNull(Me.tabledt_EmpleoAnt4.NombreJefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreJefeNull()
            Me(Me.tabledt_EmpleoAnt4.NombreJefeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_ReferenciasRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Referencias As dt_ReferenciasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Referencias = CType(Me.Table,dt_ReferenciasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Referencias.DomicilioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio' de la tabla 'dt_Referencias' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Referencias.DomicilioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreRef() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Referencias.NombreRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreRef' de la tabla 'dt_Referencias' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Referencias.NombreRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sexo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Referencias.SexoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sexo' de la tabla 'dt_Referencias' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Referencias.SexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Opcupacion() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Referencias.OpcupacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Opcupacion' de la tabla 'dt_Referencias' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Referencias.OpcupacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parentesco() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Referencias.ParentescoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Parentesco' de la tabla 'dt_Referencias' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Referencias.ParentescoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Referencias.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'dt_Referencias' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Referencias.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilioNull() As Boolean
            Return Me.IsNull(Me.tabledt_Referencias.DomicilioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilioNull()
            Me(Me.tabledt_Referencias.DomicilioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreRefNull() As Boolean
            Return Me.IsNull(Me.tabledt_Referencias.NombreRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreRefNull()
            Me(Me.tabledt_Referencias.NombreRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Referencias.SexoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexoNull()
            Me(Me.tabledt_Referencias.SexoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpcupacionNull() As Boolean
            Return Me.IsNull(Me.tabledt_Referencias.OpcupacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpcupacionNull()
            Me(Me.tabledt_Referencias.OpcupacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParentescoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Referencias.ParentescoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParentescoNull()
            Me(Me.tabledt_Referencias.ParentescoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Referencias.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tabledt_Referencias.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_IengresosRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Iengresos As dt_IengresosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Iengresos = CType(Me.Table,dt_IengresosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ingreso_Mensual() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.Ingreso_MensualColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ingreso_Mensual' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.Ingreso_MensualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ingreso_Adicional() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.Ingreso_AdicionalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ingreso_Adicional' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.Ingreso_AdicionalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gasto_Mensual() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.Gasto_MensualColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Gasto_Mensual' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.Gasto_MensualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pago_Mensual() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.Pago_MensualColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Pago_Mensual' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.Pago_MensualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor_Vivienda() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.Valor_ViviendaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Valor_Vivienda' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.Valor_ViviendaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vehiculo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.vehiculoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'vehiculo' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.vehiculoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.modeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'modelo' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.modeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor_Vehiculo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.Valor_VehiculoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Valor_Vehiculo' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.Valor_VehiculoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoVivienda() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.TipoViviendaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoVivienda' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.TipoViviendaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_vivi() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.Tipo_viviColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo_vivi' de la tabla 'dt_Iengresos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.Tipo_viviColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DependienteEconomico() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Iengresos.DependienteEconomicoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DependienteEconomico' de la tabla 'dt_Iengresos' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Iengresos.DependienteEconomicoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngreso_MensualNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.Ingreso_MensualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngreso_MensualNull()
            Me(Me.tabledt_Iengresos.Ingreso_MensualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngreso_AdicionalNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.Ingreso_AdicionalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngreso_AdicionalNull()
            Me(Me.tabledt_Iengresos.Ingreso_AdicionalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGasto_MensualNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.Gasto_MensualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGasto_MensualNull()
            Me(Me.tabledt_Iengresos.Gasto_MensualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPago_MensualNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.Pago_MensualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPago_MensualNull()
            Me(Me.tabledt_Iengresos.Pago_MensualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValor_ViviendaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.Valor_ViviendaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValor_ViviendaNull()
            Me(Me.tabledt_Iengresos.Valor_ViviendaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvehiculoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.vehiculoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvehiculoNull()
            Me(Me.tabledt_Iengresos.vehiculoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmodeloNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.modeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmodeloNull()
            Me(Me.tabledt_Iengresos.modeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValor_VehiculoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.Valor_VehiculoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValor_VehiculoNull()
            Me(Me.tabledt_Iengresos.Valor_VehiculoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoViviendaNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.TipoViviendaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoViviendaNull()
            Me(Me.tabledt_Iengresos.TipoViviendaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipo_viviNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.Tipo_viviColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipo_viviNull()
            Me(Me.tabledt_Iengresos.Tipo_viviColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDependienteEconomicoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Iengresos.DependienteEconomicoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDependienteEconomicoNull()
            Me(Me.tabledt_Iengresos.DependienteEconomicoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_Cursos1Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Cursos1 As dt_Cursos1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Cursos1 = CType(Me.Table,dt_Cursos1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos1.CursoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Curso' de la tabla 'dt_Cursos1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos1.CursoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos1.FechaInicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaInicio' de la tabla 'dt_Cursos1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos1.FechaInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFin() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos1.FechaFinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFin' de la tabla 'dt_Cursos1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos1.FechaFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos1.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Instructor' de la tabla 'dt_Cursos1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos1.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Finalizado() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos1.FinalizadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Finalizado' de la tabla 'dt_Cursos1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos1.FinalizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCursoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos1.CursoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCursoNull()
            Me(Me.tabledt_Cursos1.CursoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaInicioNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos1.FechaInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaInicioNull()
            Me(Me.tabledt_Cursos1.FechaInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFinNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos1.FechaFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFinNull()
            Me(Me.tabledt_Cursos1.FechaFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos1.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tabledt_Cursos1.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalizadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos1.FinalizadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalizadoNull()
            Me(Me.tabledt_Cursos1.FinalizadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_mafiliacion1Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_mafiliacion1 As dt_mafiliacion1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_mafiliacion1 = CType(Me.Table,dt_mafiliacion1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Forma() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion1.FormaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Forma' de la tabla 'dt_mafiliacion1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion1.FormaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion1.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ubicacion' de la tabla 'dt_mafiliacion1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion1.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion1.CantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'dt_mafiliacion1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion1.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormaNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion1.FormaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormaNull()
            Me(Me.tabledt_mafiliacion1.FormaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion1.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tabledt_mafiliacion1.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion1.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tabledt_mafiliacion1.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_mafiliacion2Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_mafiliacion2 As dt_mafiliacion2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_mafiliacion2 = CType(Me.Table,dt_mafiliacion2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Forma() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion2.FormaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Forma' de la tabla 'dt_mafiliacion2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion2.FormaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion2.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ubicacion' de la tabla 'dt_mafiliacion2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion2.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion2.CantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'dt_mafiliacion2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion2.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormaNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion2.FormaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormaNull()
            Me(Me.tabledt_mafiliacion2.FormaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion2.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tabledt_mafiliacion2.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion2.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tabledt_mafiliacion2.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_mafiliacion3Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_mafiliacion3 As dt_mafiliacion3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_mafiliacion3 = CType(Me.Table,dt_mafiliacion3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Forma() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion3.FormaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Forma' de la tabla 'dt_mafiliacion3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion3.FormaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion3.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ubicacion' de la tabla 'dt_mafiliacion3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion3.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_mafiliacion3.CantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'dt_mafiliacion3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_mafiliacion3.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormaNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion3.FormaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormaNull()
            Me(Me.tabledt_mafiliacion3.FormaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion3.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tabledt_mafiliacion3.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tabledt_mafiliacion3.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tabledt_mafiliacion3.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_Cursos2Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Cursos2 As dt_Cursos2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Cursos2 = CType(Me.Table,dt_Cursos2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos2.CursoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Curso' de la tabla 'dt_Cursos2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos2.CursoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos2.FechaInicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaInicio' de la tabla 'dt_Cursos2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos2.FechaInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFin() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos2.FechaFinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFin' de la tabla 'dt_Cursos2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos2.FechaFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos2.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Instructor' de la tabla 'dt_Cursos2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos2.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Finalizado() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos2.FinalizadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Finalizado' de la tabla 'dt_Cursos2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos2.FinalizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCursoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos2.CursoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCursoNull()
            Me(Me.tabledt_Cursos2.CursoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaInicioNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos2.FechaInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaInicioNull()
            Me(Me.tabledt_Cursos2.FechaInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFinNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos2.FechaFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFinNull()
            Me(Me.tabledt_Cursos2.FechaFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos2.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tabledt_Cursos2.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalizadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos2.FinalizadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalizadoNull()
            Me(Me.tabledt_Cursos2.FinalizadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_Cursos3Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Cursos3 As dt_Cursos3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Cursos3 = CType(Me.Table,dt_Cursos3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos3.CursoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Curso' de la tabla 'dt_Cursos3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos3.CursoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos3.FechaInicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaInicio' de la tabla 'dt_Cursos3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos3.FechaInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFin() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos3.FechaFinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFin' de la tabla 'dt_Cursos3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos3.FechaFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos3.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Instructor' de la tabla 'dt_Cursos3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos3.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Finalizado() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos3.FinalizadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Finalizado' de la tabla 'dt_Cursos3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos3.FinalizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCursoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos3.CursoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCursoNull()
            Me(Me.tabledt_Cursos3.CursoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaInicioNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos3.FechaInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaInicioNull()
            Me(Me.tabledt_Cursos3.FechaInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFinNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos3.FechaFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFinNull()
            Me(Me.tabledt_Cursos3.FechaFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos3.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tabledt_Cursos3.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalizadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos3.FinalizadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalizadoNull()
            Me(Me.tabledt_Cursos3.FinalizadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_Cursos4Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Cursos4 As dt_Cursos4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Cursos4 = CType(Me.Table,dt_Cursos4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos4.CursoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Curso' de la tabla 'dt_Cursos4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos4.CursoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos4.FechaInicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaInicio' de la tabla 'dt_Cursos4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos4.FechaInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFin() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos4.FechaFinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFin' de la tabla 'dt_Cursos4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos4.FechaFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos4.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Instructor' de la tabla 'dt_Cursos4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos4.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Finalizado() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Cursos4.FinalizadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Finalizado' de la tabla 'dt_Cursos4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Cursos4.FinalizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCursoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos4.CursoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCursoNull()
            Me(Me.tabledt_Cursos4.CursoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaInicioNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos4.FechaInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaInicioNull()
            Me(Me.tabledt_Cursos4.FechaInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFinNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos4.FechaFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFinNull()
            Me(Me.tabledt_Cursos4.FechaFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos4.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tabledt_Cursos4.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalizadoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Cursos4.FinalizadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalizadoNull()
            Me(Me.tabledt_Cursos4.FinalizadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_SolicitudRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_SolicitudRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_SolicitudRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_SolicitudRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_DatosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_DatosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_DatosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_DatosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Dt_DatosERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Dt_DatosERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Dt_DatosERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Dt_DatosERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Dt_DatosFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Dt_DatosFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Dt_DatosFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Dt_DatosFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Dt_PadreRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Dt_PadreRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Dt_PadreRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Dt_PadreRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Dt_MadreRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Dt_MadreRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Dt_MadreRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Dt_MadreRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Dt_HermanosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Dt_HermanosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Dt_HermanosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Dt_HermanosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Dt_RasgosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Dt_RasgosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Dt_RasgosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Dt_RasgosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_EmpleoAnt1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_EmpleoAnt1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_EmpleoAnt1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_EmpleoAnt1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_EmpleoAnt2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_EmpleoAnt2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_EmpleoAnt2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_EmpleoAnt2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_EmpleoAnt3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_EmpleoAnt3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_EmpleoAnt3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_EmpleoAnt3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_EmpleoAnt4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_EmpleoAnt4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_EmpleoAnt4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_EmpleoAnt4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_ReferenciasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_ReferenciasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_ReferenciasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_ReferenciasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_IengresosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_IengresosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_IengresosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_IengresosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_Cursos1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_Cursos1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_Cursos1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_Cursos1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_mafiliacion1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_mafiliacion1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_mafiliacion1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_mafiliacion1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_mafiliacion2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_mafiliacion2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_mafiliacion2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_mafiliacion2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_mafiliacion3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_mafiliacion3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_mafiliacion3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_mafiliacion3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_Cursos2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_Cursos2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_Cursos2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_Cursos2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_Cursos3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_Cursos3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_Cursos3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_Cursos3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_Cursos4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_Cursos4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_Cursos4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_Cursos4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
